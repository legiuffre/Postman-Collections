{
	"info": {
		"_postman_id": "edd1d9e1-6305-4f83-8425-e88bcf16abcf",
		"name": "zCR - Update Zonar on Trucks in CRM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28539332",
		"_collection_link": "https://team-rel.postman.co/workspace/Team-REL~69846068-eace-44a2-859b-d7fdf1b963c6/collection/28539332-edd1d9e1-6305-4f83-8425-e88bcf16abcf?action=share&source=collection_link&creator=28539332"
	},
	"item": [
		{
			"name": "POST Update Zonar on Trucks in Zoho CRM",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Function to refresh Zoho token\r",
							"function refreshZohoToken() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `https://accounts.zoho.com/oauth/v2/token?client_id=${pm.environment.get(\"prod_zoho_client_id\")}&client_secret=${pm.environment.get(\"prod_zoho_client_secret\")}&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL,ZohoCRM.coql.READ&soid=${pm.environment.get(\"prod_zoho_soid\")}`,\r",
							"            method: 'POST'\r",
							"        }, (err, response) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                const jsonData = response.json();\r",
							"                if (jsonData.access_token) {\r",
							"                    pm.environment.set('zoho_access_token', jsonData.access_token);\r",
							"                    pm.environment.set('last_token_refresh_time', Date.now());\r",
							"                    resolve(jsonData.access_token);\r",
							"                } else {\r",
							"                    reject(new Error('Failed to refresh access token'));\r",
							"                }\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// Check if token needs to be refreshed\r",
							"const tokenRefreshInterval = 3300000; // 55 minutes in milliseconds\r",
							"const lastTokenRefreshTime = pm.environment.get('last_token_refresh_time') || 0;\r",
							"\r",
							"if ((Date.now() - lastTokenRefreshTime) > tokenRefreshInterval) {\r",
							"    refreshZohoToken()\r",
							"        .then(token => {\r",
							"            console.log('Token refreshed successfully');\r",
							"            pm.variables.set('zoho_access_token', token);\r",
							"        })\r",
							"        .catch(err => {\r",
							"            console.error('Token refresh failed', err);\r",
							"        });\r",
							"} else {\r",
							"    console.log('Token is still valid');\r",
							"}\r",
							"\r",
							"var requestGetMSToken = {\r",
							"    url: `https://login.microsoftonline.com/${pm.environment.get(\"microsoft_tenant_id\")}/oauth2/v2.0/token`,\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: [\r",
							"            { key: 'grant_type', value: 'client_credentials' },\r",
							"            { key: 'client_id', value: pm.environment.get(\"prod_microsoft_client_id\") },\r",
							"            { key: 'client_secret', value: pm.environment.get(\"prod_microsoft_client_secret\") },\r",
							"            { key: 'scope', value: 'https://graph.microsoft.com/.default openid offline_access' }\r",
							"        ]\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetMSToken, function (err, tokenMSResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response: ', tokenMSResponse.json());\r",
							"    var parsedToken = tokenMSResponse.json();\r",
							"    // console.log(\"ms access token: \",parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"microsoft_access_token\",accessToken);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const moment = require('moment');\r",
							"const today = moment().startOf('day').format(\"YYYY-MM-DDTHH:mm:ssZ\");\r",
							"\r",
							"function buildQueryString(params) {\r",
							"    return Object.keys(params)\r",
							"        .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\r",
							"        .join('&');\r",
							"}\r",
							"\r",
							"function formatDateToZohoCRM(date) {\r",
							"    const centralDate = new Date(date.toLocaleString(\"en-US\", { timeZone: \"America/Chicago\" }));\r",
							"    return centralDate.toISOString().split('.')[0];\r",
							"}\r",
							"\r",
							"const mileageDate = new Date();\r",
							"const formattedDate = formatDateToZohoCRM(mileageDate);\r",
							"\r",
							"let RecCnt = pm.environment.get('RecCnt') || 0;\r",
							"let UpdtCnt = pm.environment.get('UpdtCnt') || 0;\r",
							"let flag_error = pm.environment.get('flag_error') || 0;\r",
							"let pm_map_error = pm.environment.get('pm_map_error') || {};\r",
							"\r",
							"const currentDate = new Date();\r",
							"const endtime = Math.floor(currentDate.getTime() / 1000);\r",
							"const stime = new Date(currentDate.getTime() - 7 * 24 * 60 * 60 * 1000);\r",
							"const starttime = Math.floor(stime.getTime() / 1000);\r",
							"\r",
							"pm.environment.set(\"starttime\", starttime.toString());\r",
							"pm.environment.set(\"endtime\", endtime.toString());\r",
							"\r",
							"const zonarP = pm.environment.get(\"zonar_p\");\r",
							"const zonarU = pm.environment.get(\"zonar_u\");\r",
							"const enableUpdates = true;\r",
							"const perPage = 200;\r",
							"const maxRecords = 1000;\r",
							"let offset = pm.environment.get('offset') || 0;\r",
							"let totalProcessed = pm.environment.get('totalProcessed') || 0;\r",
							"let allResults = pm.environment.get('allResults') ? JSON.parse(pm.environment.get('allResults')) : [];\r",
							"\r",
							"console.log(\"enableUpdates: \" + enableUpdates);\r",
							"\r",
							"const csvFileRow = pm.environment.get('csvFileRow') ? JSON.parse(pm.environment.get('csvFileRow')) : [\"VIN,MPG,Odometer,Distance\"];\r",
							"\r",
							"function fetchAllTrucks(offset, limit) {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `https://www.zohoapis.com/crm/v6/coql`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Authorization': `Zoho-oauthtoken ${pm.environment.get('zoho_access_token')}`,\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: JSON.stringify({\r",
							"                \"select_query\": `SELECT id, Name, Mileage_Last_Updated, Zonar_GPS_ID, Current_Mileage, Lease_Start_Date FROM Trucks WHERE ((Truck_Status = '-Delivered' and Zonar_GPS_ID is not null) and (Mileage_Last_Updated < '${today}' or Mileage_Last_Updated is null)) LIMIT ${limit} OFFSET ${offset}`\r",
							"            })\r",
							"        }, (err, response) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                try {\r",
							"                    const responseBody = response.text();\r",
							"                    if (!responseBody.trim()) {\r",
							"                        console.log('Error: No remaining truck data for COQL call');\r",
							"                        resolve([]);\r",
							"                    } else {\r",
							"                        const jsonData = JSON.parse(responseBody);\r",
							"                        if ('data' in jsonData) {\r",
							"                            resolve(jsonData.data);\r",
							"                        } else {\r",
							"                            console.log(\"Error: 'data' key not found in the JSON response\");\r",
							"                            resolve([]);\r",
							"                        }\r",
							"                    }\r",
							"                } catch (error) {\r",
							"                    reject(new Error(\"Failed to parse response: \" + error.message));\r",
							"                }\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"function fetchZonarData(paramMap) {\r",
							"    const queryParams = buildQueryString(paramMap);\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `https://omi.zonarsystems.net/interface.php?${queryParams}`,\r",
							"            method: 'GET',\r",
							"            timeout: 5000\r",
							"        }, (err, response) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                resolve(response.json());\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"function updateRecord(module, id, data) {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `https://www.zohoapis.com/crm/v2/${module}/${id}`,\r",
							"            method: 'PUT',\r",
							"            header: {\r",
							"                'Authorization': `Zoho-oauthtoken ${pm.environment.get('zoho_access_token')}`\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({ data: [data] })\r",
							"            }\r",
							"        }, (err, response) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                resolve(response.json());\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"function sendEmail(subject, message, csvFileName, csvContent) {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `https://graph.microsoft.com/v1.0/users/${pm.environment.get(\"microsoft_user_id\")}/sendMail`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                Authorization: `Bearer ${pm.variables.get(\"microsoft_access_token\")}`,\r",
							"                'Content-Type': \"application/json\"\r",
							"            },\r",
							"            body: JSON.stringify({\r",
							"                message: {\r",
							"                    subject: subject,\r",
							"                    body: {\r",
							"                        contentType: \"html\",\r",
							"                        content: `${message}`\r",
							"                    },\r",
							"                    toRecipients: [{\r",
							"                        emailAddress: {\r",
							"                            address: pm.environment.get(\"it_email\")\r",
							"                        }\r",
							"                    }],\r",
							"                    attachments: [{\r",
							"                        \"@odata.type\": \"#microsoft.graph.fileAttachment\",\r",
							"                        \"name\": csvFileName,\r",
							"                        \"contentType\": \"text/csv\",\r",
							"                        \"contentBytes\": Buffer.from(csvContent).toString('base64')\r",
							"                    }]\r",
							"                },\r",
							"                saveToSentItems: \"true\"\r",
							"            })\r",
							"        }, (err, res) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                resolve(res);\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"(async function () {\r",
							"    try {\r",
							"        while (totalProcessed < maxRecords) {\r",
							"            const records = await fetchAllTrucks(offset, perPage);\r",
							"            if (records.length === 0) {\r",
							"                break;\r",
							"            }\r",
							"\r",
							"            const remainingRecords = maxRecords - totalProcessed;\r",
							"            const recordsToProcess = records.slice(0, remainingRecords);\r",
							"\r",
							"            allResults = allResults.concat(recordsToProcess);\r",
							"            totalProcessed += recordsToProcess.length;\r",
							"\r",
							"            if (totalProcessed >= maxRecords) {\r",
							"                break;\r",
							"            }\r",
							"\r",
							"            offset += perPage;\r",
							"\r",
							"            pm.environment.set('offset', offset);\r",
							"            pm.environment.set('totalProcessed', totalProcessed);\r",
							"            pm.environment.set('allResults', JSON.stringify(allResults));\r",
							"            pm.environment.set('RecCnt', RecCnt);\r",
							"            pm.environment.set('UpdtCnt', UpdtCnt);\r",
							"            pm.environment.set('flag_error', flag_error);\r",
							"            pm.environment.set('pm_map_error', pm_map_error);\r",
							"            pm.environment.set('csvFileRow', JSON.stringify(csvFileRow));\r",
							"\r",
							"            // Break the loop to avoid timeout\r",
							"            postman.setNextRequest(null);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        for (let truck of allResults) {\r",
							"            let final = {};\r",
							"            let final2 = {};\r",
							"            const vin = truck.Name;\r",
							"            const gpsID = truck.Zonar_GPS_ID;\r",
							"\r",
							"            if (gpsID) {\r",
							"                RecCnt++;\r",
							"                const trkID = truck.id;\r",
							"                const InserviceDate = truck.Lease_Start_Date;\r",
							"                const currentMileage = truck.Current_Mileage;\r",
							"\r",
							"                const paramMap = {\r",
							"                    customer: \"rel9300\",\r",
							"                    username: zonarU,\r",
							"                    password: zonarP,\r",
							"                    action: \"showposition\",\r",
							"                    operation: \"path\",\r",
							"                    format: \"json\",\r",
							"                    starttime: starttime,\r",
							"                    endtime: endtime,\r",
							"                    version: \"2\",\r",
							"                    logvers: \"3.8\",\r",
							"                    reqtype: \"vin\",\r",
							"                    target: vin\r",
							"                };\r",
							"\r",
							"                try {\r",
							"                    const actResp = await fetchZonarData(paramMap);\r",
							"\r",
							"                    if (actResp.error) {\r",
							"                        throw new Error(`Odometer Script Failed on ${vin} with the following error ${actResp}`);\r",
							"                    }\r",
							"\r",
							"                    const pathEvents = actResp.pathevents;\r",
							"                    const assetCount = pathEvents.assetcount;\r",
							"                    if (assetCount > 0) {\r",
							"                        const asset = pathEvents.assets;\r",
							"                        const recordCount = asset[0].eventcount;\r",
							"                        let last_odometer = 0, last_distance = 0, first_distance = 0, last_fuel_counter = 0, first_fuel_counter = 0, distance_traveled = 0, mpg = 0;\r",
							"\r",
							"                        if (recordCount > 0) {\r",
							"                            const events = asset[0].events;\r",
							"\r",
							"                            if(recordCount == 1) \r",
							"                            {\r",
							"                                count = 0;\r",
							"                            }\r",
							"                            else\r",
							"                            {\r",
							"                                count = 1;\r",
							"                            }\r",
							"\r",
							"                            first_distance = parseInt(events[count].distance_traveled || 0, 10);\r",
							"                            first_fuel_counter = parseInt((events[count].fuel_counter ? events[count].fuel_counter.replace(\",\", \"\") : 0), 10);                                                       \r",
							"                            last_odometer = parseInt(events[recordCount - 1].odometer || 0, 10);\r",
							"                            last_distance = parseInt(events[recordCount - 1].distance_traveled || 0, 10);\r",
							"                            last_fuel_counter = parseInt((events[recordCount - 1].fuel_counter ? events[recordCount - 1].fuel_counter.replace(\",\", \"\") : 0), 10);\r",
							"\r",
							"                            if (last_distance > 0 && !isNaN(last_fuel_counter) && !isNaN(first_fuel_counter)) {\r",
							"                                distance_traveled = last_distance - first_distance;\r",
							"                                const fuel_consumed = last_fuel_counter - first_fuel_counter;\r",
							"                                mpg = ((distance_traveled / fuel_consumed) * 10).toFixed(1);\r",
							"                            }\r",
							"                        }\r",
							"\r",
							"                        if (mpg > 0) final.MPG = parseInt(mpg);\r",
							"                        final.Mileage_Driven = distance_traveled;\r",
							"                        if (parseInt(last_odometer) > parseInt(currentMileage)) \r",
							"                        {\r",
							"                            final.Current_Mileage = last_odometer;\r",
							"                            final2.Current_Mileage = last_odometer;\r",
							"                        }\r",
							"                        final.Mileage_Last_Updated = formattedDate;\r",
							"                        final2.Solution_Center_Start_Date = InserviceDate || \"\";\r",
							"\r",
							"                        if (enableUpdates) {\r",
							"                            try {\r",
							"                                const update = await updateRecord('Trucks', trkID, final);\r",
							"                                const truckRecStatus = update.data[0].status;\r",
							"                                const updateTruckRecDetails = update.data[0].details;\r",
							"                                if (truckRecStatus != \"success\") {\r",
							"                                    throw new Error(`Truck Rec Failed to Update: ${vin}`);\r",
							"                                } else {\r",
							"                                    UpdtCnt++;\r",
							"                                }\r",
							"\r",
							"                                const pmID = await new Promise((resolve, reject) => {\r",
							"                                    pm.sendRequest({\r",
							"                                        url: `https://www.zohoapis.com/crm/v2/Trucks/${trkID}/Truck_PM`,\r",
							"                                        method: 'GET',\r",
							"                                        header: {\r",
							"                                            'Authorization': `Zoho-oauthtoken ${pm.environment.get('zoho_access_token')}`\r",
							"                                        }\r",
							"                                    }, (err, response) => {\r",
							"                                        if (err) {\r",
							"                                            reject(err);\r",
							"                                        } else {\r",
							"                                            const responseBody = response.text();\r",
							"                                            if (!responseBody.trim()) {\r",
							"                                                console.log('Error: No data for Truck PM Rec, empty input');\r",
							"                                                resolve([]);\r",
							"                                            } else {\r",
							"                                                const jsonData = JSON.parse(responseBody);\r",
							"                                                if ('data' in jsonData) {\r",
							"                                                    resolve(jsonData.data);\r",
							"                                                } else {\r",
							"                                                    console.log(\"Error: 'data' key not found in the JSON response\");\r",
							"                                                    resolve([]);\r",
							"                                                }\r",
							"                                            }\r",
							"                                        }\r",
							"                                    });\r",
							"                                });\r",
							"\r",
							"                                for (let rec of pmID) {\r",
							"                                    const pm_update = await updateRecord('Truck_PM', rec.id, final2);\r",
							"                                    const pm_rec_status = pm_update.data[0].status;\r",
							"                                    const pm_rec_details = pm_update.data[0].details;\r",
							"                                    if (pm_rec_status != \"success\") {\r",
							"                                        throw new Error(`TruckPM Rec Failed to Update: ${vin}`);\r",
							"                                    } else {\r",
							"                                        // Update successful\r",
							"                                    }\r",
							"                                }\r",
							"                            } catch (error) {\r",
							"                                pm_map_error[vin] = error.message;\r",
							"                                flag_error = 1;\r",
							"                                console.error(error);\r",
							"                            }\r",
							"                        }\r",
							"\r",
							"                        csvFileRow.push(`${vin},${mpg},${last_odometer},${distance_traveled}`);\r",
							"                    }\r",
							"                } catch (error) {\r",
							"                    pm_map_error[vin] = error.message;\r",
							"                    flag_error = 1;\r",
							"                    console.error(error);\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"\r",
							"        const csvFileName = `truck_export_${endtime}.csv`;\r",
							"        const csvContent = csvFileRow.join('\\n');\r",
							"        pm.environment.set('csvFileContent', csvContent);\r",
							"\r",
							"        if (flag_error === 1) {\r",
							"            await sendEmail('Schedule - Zonar Updates for Truck and PM Records', `Schedule Failed: <br><br>${JSON.stringify(pm_map_error, null, 2)}<br><br>`, csvFileName, csvContent);\r",
							"            console.log(\"Schedule - Zonar Updates for Truck and PM Records Failed: \" + JSON.stringify(pm_map_error, null, 2));\r",
							"        } else {\r",
							"            await sendEmail('Schedule - Zonar Updates for Truck and PM Records - Completed Update', `Odometer Script Completed Update<br><br>Total Records Updated = ${UpdtCnt}<br><br>Total Record Count = ${RecCnt}<br><br>`, csvFileName, csvContent);\r",
							"            console.log(\"Schedule - Zonar Updates for Truck and PM Records - Completed Update: \" + `Total Records Updated = ${UpdtCnt}, Total Record Count = ${RecCnt}`);\r",
							"        }\r",
							"\r",
							"        // Clear interval if exists\r",
							"        if (typeof intervalId !== 'undefined') {\r",
							"            clearInterval(intervalId);\r",
							"        }\r",
							"\r",
							"    } catch (error) {\r",
							"        console.error(error);\r",
							"    }\r",
							"})();\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://accounts.zoho.com/oauth/v2/token?client_id={{prod_zoho_client_id}}&client_secret={{prod_zoho_client_secret}}&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL,ZohoCRM.coql.READ&soid=ZohoCRM.747501552",
					"protocol": "https",
					"host": [
						"accounts",
						"zoho",
						"com"
					],
					"path": [
						"oauth",
						"v2",
						"token"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{prod_zoho_client_id}}"
						},
						{
							"key": "client_secret",
							"value": "{{prod_zoho_client_secret}}"
						},
						{
							"key": "grant_type",
							"value": "client_credentials"
						},
						{
							"key": "scope",
							"value": "ZohoCRM.modules.ALL,ZohoCRM.settings.ALL,ZohoCRM.coql.READ"
						},
						{
							"key": "soid",
							"value": "ZohoCRM.747501552"
						}
					]
				}
			},
			"response": []
		}
	]
}