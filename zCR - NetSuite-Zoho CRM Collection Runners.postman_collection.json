{
	"info": {
		"_postman_id": "a053b7f9-187e-4761-b227-a6db67a539ab",
		"name": "zCR - NetSuite/Zoho CRM Collection Runners",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28539332",
		"_collection_link": "https://team-rel.postman.co/workspace/Team-REL~69846068-eace-44a2-859b-d7fdf1b963c6/collection/28539332-a053b7f9-187e-4761-b227-a6db67a539ab?action=share&source=collection_link&creator=28539332"
	},
	"item": [
		{
			"name": "GET Customer Lease Info - Collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cyptojs = require('crypto-js');\r",
							"\r",
							"let tokenClientIDStr = 'prod_ns_token_client_id';\r",
							"let tokenClientSecretStr = 'prod_ns_token_client_secret';\r",
							"let tokenIDStr = 'PROD_NS_TOKEN_ID';\r",
							"let tokenSecretStr = 'PROD_NS_TOKEN_SECRET';\r",
							"let acctIDStr = 'PROD_NS_ACCOUNT_ID';\r",
							"let ns_acct_url_id = \"7936739\";\r",
							"let custom_search_script_id = \"1001\";\r",
							"let custom_search_col_script_id = \"1002\";\r",
							"\r",
							"pm.environment.set(\"ns_acct_url_id\", ns_acct_url_id);\r",
							"pm.environment.set(\"custom_search_script_id\", custom_search_script_id);\r",
							"pm.environment.set(\"custom_search_col_script_id\", custom_search_col_script_id);\r",
							"\r",
							"const oauth_consumer_key = pm.environment.get(tokenClientIDStr);  \r",
							"const oauth_consumer_secret = pm.environment.get(tokenClientSecretStr);\r",
							"const oauth_token_id = pm.environment.get(tokenIDStr);\r",
							"const oauth_token_secret = pm.environment.get(tokenSecretStr);\r",
							"const oauth_account_id = pm.environment.get(acctIDStr); \r",
							"\r",
							"const oauth_signing_key = `${encodeURIComponent(oauth_consumer_secret)}&${encodeURIComponent(oauth_token_secret)}`;\r",
							"\r",
							"const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"let oauth_nonce = '';\r",
							"for (var i = 0; i < 32; i++) {\r",
							"    oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));\r",
							"}\r",
							"const oauth_nonce_array = cyptojs.enc.Utf8.parse(oauth_nonce);\r",
							"const oauth_nonce_final = encodeURIComponent(cyptojs.enc.Base64.stringify(oauth_nonce_array));\r",
							"\r",
							"const oauth_parameter_string_object = {};\r",
							"\r",
							"oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;\r",
							"oauth_parameter_string_object.oauth_token = oauth_token_id;\r",
							"\r",
							"oauth_parameter_string_object.oauth_nonce = oauth_nonce_final;\r",
							"\r",
							"oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);\r",
							"\r",
							"oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA256';\r",
							"\r",
							"oauth_parameter_string_object.oauth_version = '1.0';\r",
							"\r",
							"const oauth_authorization_header_object = {};\r",
							"for (var key in oauth_parameter_string_object) {\r",
							"    oauth_authorization_header_object[key] = oauth_parameter_string_object[key];\r",
							"}\r",
							"\r",
							"oauth_authorization_header_object.realm = oauth_account_id;\r",
							"\r",
							"const url_query_string = pm.request.url.getQueryString({  // Postman method to get query string\r",
							"    ignoreDisabled: true\r",
							"});\r",
							"\r",
							"let url_query_string_array = [];\r",
							"\r",
							"if (url_query_string != \"\"){\r",
							"    url_query_string_array = url_query_string.split('&');\r",
							"}\r",
							"\r",
							"let url_query_string_object = {};\r",
							"if (url_query_string !== \"\") {\r",
							"    url_query_string_object = JSON.parse(`{\"${url_query_string.replace(/&/g, '\",\"').replace(/=/g,'\":\"')}\"}`, function(key, value) {return key === \"\" ? value : encodeURIComponent(value)});\r",
							"}\r",
							"\r",
							"// parse request.params\r",
							"for (var key in url_query_string_object) {;\r",
							"    if(url_query_string_object[key] == \"%7B%7Bcustom_search_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_script_id;\r",
							"    } else if (url_query_string_object[key] == \"%7B%7Bcustom_search_col_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_col_script_id;\r",
							"    }\r",
							"    oauth_parameter_string_object[key] = url_query_string_object[key];\r",
							"    \r",
							"}\r",
							"\r",
							"// sort object by key\r",
							"const oauth_parameter_string_object_ordered = {};\r",
							"Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {\r",
							"    oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];\r",
							"});\r",
							"\r",
							"// convert object into array\r",
							"const oauth_parameter_string_array = [];\r",
							"for (var key in oauth_parameter_string_object_ordered) {\r",
							"    oauth_parameter_string_array.push(`${key}=${oauth_parameter_string_object_ordered[key]}`);\r",
							"}\r",
							"\r",
							"// generate parameter string\r",
							"const oauth_parameter_string = oauth_parameter_string_array.join('&');\r",
							"\r",
							"let base_host = pm.request.url.getOAuth1BaseUrl();\r",
							"let regexp = /{{(.*?)}}/g;\r",
							"while (result = regexp.exec(base_host)) {\r",
							"    let value = pm.environment.get(result[1]);\r",
							"    base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);\r",
							"}\r",
							"\r",
							"const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;\r",
							"let oauth_signature = cyptojs.HmacSHA256(oauth_base_string, oauth_signing_key).toString(cyptojs.enc.Base64);\r",
							"oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);\r",
							"\r",
							"// convert object into array (for Authorization header string)\r",
							"const oauth_authorization_header_array = [];\r",
							"for (var key in oauth_authorization_header_object) {\r",
							"    oauth_authorization_header_array.push(`${key}=\"${oauth_authorization_header_object[key]}\"`);\r",
							"}\r",
							"\r",
							"const oauth_authorization_header = oauth_authorization_header_array.join(', ');\r",
							"\r",
							"// generate Authorization header, FINALLY!\r",
							"pm.request.headers.add({\r",
							"    key: 'Authorization',\r",
							"    value: 'OAuth ' + oauth_authorization_header\r",
							"});\r",
							"\r",
							"// Escape URI parameters using encodeURIComponent => RFC3986\r",
							"// This is encoding the query string params in the request.\r",
							"if (url_query_string_array.length !== 0) {\r",
							"    let request_parameter_array = [];\r",
							"    for (var key in url_query_string_object) {\r",
							"        request_parameter_array.push(key + '=' + url_query_string_object[key]);\r",
							"    }\r",
							"    const request_parameter_string = request_parameter_array.join('&');\r",
							"\r",
							"    pm.request.url = pm.request.url.getOAuth1BaseUrl() + \"?\" + request_parameter_string;\r",
							"}\r",
							"\r",
							"var requestGetToken = {\r",
							"    url: 'https://accounts.zoho.com/oauth/v2/token?client_id=' + pm.environment.get(\"prod_zoho_client_id\") + '&client_secret=' + pm.environment.get(\"prod_zoho_client_secret\") + '&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL&soid=ZohoCRM.747501552',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetToken, function (err, tokenResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response:', tokenResponse.json());\r",
							"    var parsedToken = tokenResponse.json();\r",
							"    console.log(parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"zoho_access_token\",accessToken);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the delay between each request (in milliseconds)\r",
							"var delayBetweenRequests = 1000; // 1 second delay\r",
							"\r",
							"var accessToken = pm.variables.get(\"zoho_access_token\");\r",
							"console.log(\"accessToken: \" + accessToken);\r",
							"console.log(\"access collection token: \" + pm.variables.get(\"zoho_access_token\"));\r",
							"var jsonData = pm.response.json();\r",
							"var results = jsonData.results;\r",
							"// console.log(\"results: \" + JSON.stringify(results));\r",
							"if (results) {\r",
							"    let count = 1;\r",
							"    if(accessToken !== null)\r",
							"    {\r",
							"        function sendRequestWithDelay(index) {\r",
							"            // if (index < results.length) {\r",
							"            if (index < results.length && count <= 1) {\r",
							"                let result_obj = results[index];\r",
							"                let values = result_obj.values;\r",
							"                let finAmount = values['custrecordsales_price'];\r",
							"                let terms = values['custrecord_lma_ls_term'];\r",
							"                let residual = values['custrecord_fa_ast_residual_value'];\r",
							"                let downPmt = values['custrecord_lma_ls_prepayment'];\r",
							"                let wklyEscrowPmt = values['CUSTRECORD_LMA_LPA_LEASE.custrecord_lma_lpa_nonls_payment_1'];\r",
							"                let zonarFee = values['CUSTRECORD_LMA_LPA_LEASE.custrecord_lma_lpa_nonls_payment_3'];\r",
							"                let scFee = values['CUSTRECORD_LMA_LPA_LEASE.custrecord_lma_lpa_nonls_payment_2'];\r",
							"                let leasePmt = values['CUSTRECORD_LMA_LPA_LEASE.custrecord_lma_lpa_payment_amount'];\r",
							"                let wklyPmt = parseFloat(leasePmt) + parseFloat(scFee) + parseFloat(zonarFee);\r",
							"                let intRate = values['custrecordactual_int_rate'];\r",
							"                intRate = intRate.split(\"%\")[0];\r",
							"                let leaseExp = values['custrecord_lma_ls_end_date'];\r",
							"                let dateFunded = values['custrecord_lma_ls_commencement_date'];\r",
							"                let physDam = values['CUSTRECORD_LMA_LPA_LEASE.custrecord_lma_lpa_nonls_payment_4'];\r",
							"                let propTax = values['CUSTRECORD_LMA_LPA_LEASE.custrecord_lma_lpa_nonls_payment_5'];\r",
							"                let truckVIN = values['custrecord_fa_ast_vin'];\r",
							"\r",
							"                const moment = require('moment');\r",
							"                let f_leaseExp = moment(leaseExp,\"M/D/YYYY\").format(\"YYYY-MM-DD\");\r",
							"                let f_dateFunded = moment(dateFunded,\"M/D/YYYY\").format(\"YYYY-MM-DD\");\r",
							"                console.log(f_leaseExp);\r",
							"                if (truckVIN !== null) {\r",
							"                    var requestGetTruck = {\r",
							"                        url: 'https://www.zohoapis.com/crm/v6/Trucks/search?criteria=(Name%3Aequals%3A' + truckVIN + ')&fields=id',\r",
							"                        method: 'GET',\r",
							"                        header: {\r",
							"                            'Content-Type': 'application/json',\r",
							"                            'Authorization': 'Bearer ' + accessToken,\r",
							"                        }\r",
							"                    };\r",
							"\r",
							"                    setTimeout(() => {\r",
							"                        pm.sendRequest(requestGetTruck, function(err, truckResponse) {\r",
							"                            if (err) {\r",
							"                                console.error('Error:', err);\r",
							"                                return;\r",
							"                            }\r",
							"                            if (truckResponse.code === 204) {\r",
							"                                console.log('204 No Content Received');\r",
							"                            } else if (truckResponse.code === 401) {\r",
							"                                console.log(\"Invalid response: \" + truckResponse.json().message);\r",
							"                            } else if (truckResponse.code === 200) {\r",
							"                                var parsedTruck = truckResponse.json();\r",
							"                                console.log('Response:', truckResponse.json());\r",
							"                                // if (parsedTruck !== null || parsedTruck != '') {\r",
							"                                    var truckData = parsedTruck.data;\r",
							"                                    console.log(truckData);\r",
							"                                    var truckID = truckData[0].id;\r",
							"                                    console.log(truckID);\r",
							"                                    if (truckID !== null) {\r",
							"                                        pm.sendRequest({\r",
							"                                            url: 'https://www.zohoapis.com/crm/v6/Trucks/' + truckID,\r",
							"                                            method: 'PUT',\r",
							"                                            header: {\r",
							"                                                'Content-Type': 'application/json',\r",
							"                                                'Authorization': 'Bearer ' + accessToken\r",
							"                                            },\r",
							"                                            body: {\r",
							"                                                mode: 'raw',\r",
							"                                                raw: JSON.stringify({\r",
							"                                                    \"data\": [{\r",
							"                                                        \"Financed_Amount\": finAmount,\r",
							"                                                        \"Terms_Weeks\": terms,\r",
							"                                                        \"Residual\": residual,\r",
							"                                                        \"Down_Payment\": downPmt,\r",
							"                                                        \"Weekly_Payment\": wklyPmt,\r",
							"                                                        \"Weekly_Escrow_Payment\": wklyEscrowPmt,\r",
							"                                                        \"Interest_Rate\": intRate,\r",
							"                                                        \"Lease_Expiration\": f_leaseExp,\r",
							"                                                        \"Date_Funded\": f_dateFunded,\r",
							"                                                        \"PhysDam_Payment\": physDam,\r",
							"                                                        \"Property_Tax\": propTax\r",
							"                                                    }]\r",
							"                                                })\r",
							"                                            }\r",
							"                                        }, function(err, updateTruckResponse) {\r",
							"                                            if (err) {\r",
							"                                                console.error('Error:', err);\r",
							"                                                return;\r",
							"                                            }\r",
							"                                            console.log('Response:', updateTruckResponse.json());\r",
							"                                        });\r",
							"                                    }\r",
							"                                // }\r",
							"                            }\r",
							"                            sendRequestWithDelay(index + 1); // Call the next request\r",
							"                        });\r",
							"                    }, delayBetweenRequests);\r",
							"                }\r",
							"            }\r",
							"            count = count + 1;\r",
							"        }\r",
							"\r",
							"        // Start sending requests\r",
							"        sendRequestWithDelay(0);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"searchID\": \"customsearch1038\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
					"protocol": "https",
					"host": [
						"7936739",
						"restlets",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"app",
						"site",
						"hosting",
						"restlet.nl"
					],
					"query": [
						{
							"key": "script",
							"value": "1001"
						},
						{
							"key": "deploy",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Customer Remaining Balance - Collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cyptojs = require('crypto-js');\r",
							"\r",
							"let tokenClientIDStr = 'prod_ns_token_client_id';\r",
							"let tokenClientSecretStr = 'prod_ns_token_client_secret';\r",
							"let tokenIDStr = 'PROD_NS_TOKEN_ID';\r",
							"let tokenSecretStr = 'PROD_NS_TOKEN_SECRET';\r",
							"let acctIDStr = 'PROD_NS_ACCOUNT_ID';\r",
							"let ns_acct_url_id = \"7936739\";\r",
							"let custom_search_script_id = \"1001\";\r",
							"let custom_search_col_script_id = \"1002\";\r",
							"\r",
							"pm.environment.set(\"ns_acct_url_id\", ns_acct_url_id);\r",
							"pm.environment.set(\"custom_search_script_id\", custom_search_script_id);\r",
							"pm.environment.set(\"custom_search_col_script_id\", custom_search_col_script_id);\r",
							"\r",
							"const oauth_consumer_key = pm.environment.get(tokenClientIDStr);  \r",
							"const oauth_consumer_secret = pm.environment.get(tokenClientSecretStr);\r",
							"const oauth_token_id = pm.environment.get(tokenIDStr);\r",
							"const oauth_token_secret = pm.environment.get(tokenSecretStr);\r",
							"const oauth_account_id = pm.environment.get(acctIDStr); \r",
							"\r",
							"const oauth_signing_key = `${encodeURIComponent(oauth_consumer_secret)}&${encodeURIComponent(oauth_token_secret)}`;\r",
							"\r",
							"const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"let oauth_nonce = '';\r",
							"for (var i = 0; i < 32; i++) {\r",
							"    oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));\r",
							"}\r",
							"const oauth_nonce_array = cyptojs.enc.Utf8.parse(oauth_nonce);\r",
							"const oauth_nonce_final = encodeURIComponent(cyptojs.enc.Base64.stringify(oauth_nonce_array));\r",
							"\r",
							"const oauth_parameter_string_object = {};\r",
							"\r",
							"oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;\r",
							"oauth_parameter_string_object.oauth_token = oauth_token_id;\r",
							"\r",
							"oauth_parameter_string_object.oauth_nonce = oauth_nonce_final;\r",
							"\r",
							"oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);\r",
							"\r",
							"oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA256';\r",
							"\r",
							"oauth_parameter_string_object.oauth_version = '1.0';\r",
							"\r",
							"const oauth_authorization_header_object = {};\r",
							"for (var key in oauth_parameter_string_object) {\r",
							"    oauth_authorization_header_object[key] = oauth_parameter_string_object[key];\r",
							"}\r",
							"\r",
							"oauth_authorization_header_object.realm = oauth_account_id;\r",
							"\r",
							"const url_query_string = pm.request.url.getQueryString({  // Postman method to get query string\r",
							"    ignoreDisabled: true\r",
							"});\r",
							"\r",
							"let url_query_string_array = [];\r",
							"\r",
							"if (url_query_string != \"\"){\r",
							"    url_query_string_array = url_query_string.split('&');\r",
							"}\r",
							"\r",
							"let url_query_string_object = {};\r",
							"if (url_query_string !== \"\") {\r",
							"    url_query_string_object = JSON.parse(`{\"${url_query_string.replace(/&/g, '\",\"').replace(/=/g,'\":\"')}\"}`, function(key, value) {return key === \"\" ? value : encodeURIComponent(value)});\r",
							"}\r",
							"\r",
							"// parse request.params\r",
							"for (var key in url_query_string_object) {;\r",
							"    if(url_query_string_object[key] == \"%7B%7Bcustom_search_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_script_id;\r",
							"    } else if (url_query_string_object[key] == \"%7B%7Bcustom_search_col_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_col_script_id;\r",
							"    }\r",
							"    oauth_parameter_string_object[key] = url_query_string_object[key];\r",
							"    \r",
							"}\r",
							"\r",
							"// sort object by key\r",
							"const oauth_parameter_string_object_ordered = {};\r",
							"Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {\r",
							"    oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];\r",
							"});\r",
							"\r",
							"// convert object into array\r",
							"const oauth_parameter_string_array = [];\r",
							"for (var key in oauth_parameter_string_object_ordered) {\r",
							"    oauth_parameter_string_array.push(`${key}=${oauth_parameter_string_object_ordered[key]}`);\r",
							"}\r",
							"\r",
							"// generate parameter string\r",
							"const oauth_parameter_string = oauth_parameter_string_array.join('&');\r",
							"\r",
							"let base_host = pm.request.url.getOAuth1BaseUrl();\r",
							"let regexp = /{{(.*?)}}/g;\r",
							"while (result = regexp.exec(base_host)) {\r",
							"    let value = pm.environment.get(result[1]);\r",
							"    base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);\r",
							"}\r",
							"\r",
							"const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;\r",
							"let oauth_signature = cyptojs.HmacSHA256(oauth_base_string, oauth_signing_key).toString(cyptojs.enc.Base64);\r",
							"oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);\r",
							"\r",
							"// convert object into array (for Authorization header string)\r",
							"const oauth_authorization_header_array = [];\r",
							"for (var key in oauth_authorization_header_object) {\r",
							"    oauth_authorization_header_array.push(`${key}=\"${oauth_authorization_header_object[key]}\"`);\r",
							"}\r",
							"\r",
							"const oauth_authorization_header = oauth_authorization_header_array.join(', ');\r",
							"\r",
							"// generate Authorization header, FINALLY!\r",
							"pm.request.headers.add({\r",
							"    key: 'Authorization',\r",
							"    value: 'OAuth ' + oauth_authorization_header\r",
							"});\r",
							"\r",
							"// Escape URI parameters using encodeURIComponent => RFC3986\r",
							"// This is encoding the query string params in the request.\r",
							"if (url_query_string_array.length !== 0) {\r",
							"    let request_parameter_array = [];\r",
							"    for (var key in url_query_string_object) {\r",
							"        request_parameter_array.push(key + '=' + url_query_string_object[key]);\r",
							"    }\r",
							"    const request_parameter_string = request_parameter_array.join('&');\r",
							"\r",
							"    pm.request.url = pm.request.url.getOAuth1BaseUrl() + \"?\" + request_parameter_string;\r",
							"}\r",
							"\r",
							"var requestGetToken = {\r",
							"    url: 'https://accounts.zoho.com/oauth/v2/token?client_id=' + pm.environment.get(\"prod_zoho_client_id\") + '&client_secret=' + pm.environment.get(\"prod_zoho_client_secret\") + '&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL&soid=ZohoCRM.747501552',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetToken, function (err, tokenResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response:', tokenResponse.json());\r",
							"    var parsedToken = tokenResponse.json();\r",
							"    console.log(parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"zoho_access_token\",accessToken);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the delay between each request (in milliseconds)\r",
							"var delayBetweenRequests = 1000; // 1 second delay\r",
							"\r",
							"var accessToken = pm.variables.get(\"zoho_access_token\");\r",
							"console.log(\"accessToken: \" + accessToken);\r",
							"console.log(\"access collection token: \" + pm.variables.get(\"zoho_access_token\"));\r",
							"var jsonData = pm.response.json();\r",
							"var results = jsonData.results;\r",
							"// console.log(\"results: \" + JSON.stringify(results));\r",
							"if (results) {\r",
							"    let count = 1;\r",
							"    if(accessToken !== null)\r",
							"    {\r",
							"        function sendRequestWithDelay(index) {\r",
							"            // if (index < results.length) {\r",
							"            if (index < results.length && count <= 1) {\r",
							"                let result_obj = results[index];\r",
							"                let values = result_obj.values;\r",
							"                let leasePeriod = values['CUSTRECORD_LMA_LSE_LEASE.custrecord_lma_lse_remaining_periods'];\r",
							"                let truckVIN = values['custrecord_fa_ast_vin'];\r",
							"\r",
							"                if (truckVIN !== null) {\r",
							"                    var requestGetTruck = {\r",
							"                        url: 'https://www.zohoapis.com/crm/v6/Trucks/search?criteria=(Name%3Aequals%3A' + truckVIN + ')&fields=id',\r",
							"                        method: 'GET',\r",
							"                        header: {\r",
							"                            'Content-Type': 'application/json',\r",
							"                            'Authorization': 'Bearer ' + accessToken,\r",
							"                        }\r",
							"                    };\r",
							"\r",
							"                    setTimeout(() => {\r",
							"                        pm.sendRequest(requestGetTruck, function(err, truckResponse) {\r",
							"                            if (err) {\r",
							"                                console.error('Error:', err);\r",
							"                                return;\r",
							"                            }\r",
							"                            if (truckResponse.code === 204) {\r",
							"                                console.log('204 No Content Received');\r",
							"                            } else if (truckResponse.code === 401) {\r",
							"                                console.log(\"Invalid response: \" + truckResponse.json().message);\r",
							"                            } else if (truckResponse.code === 200) {\r",
							"                                var parsedTruck = truckResponse.json();\r",
							"                                console.log('Response:', truckResponse.json());\r",
							"                                // if (parsedTruck !== null || parsedTruck != '') {\r",
							"                                    var truckData = parsedTruck.data;\r",
							"                                    console.log(truckData);\r",
							"                                    var truckID = truckData[0].id;\r",
							"                                    console.log(truckID);\r",
							"                                    if (truckID !== null) {\r",
							"                                        pm.sendRequest({\r",
							"                                            url: 'https://www.zohoapis.com/crm/v6/Trucks/' + truckID,\r",
							"                                            method: 'PUT',\r",
							"                                            header: {\r",
							"                                                'Content-Type': 'application/json',\r",
							"                                                'Authorization': 'Bearer ' + accessToken\r",
							"                                            },\r",
							"                                            body: {\r",
							"                                                mode: 'raw',\r",
							"                                                raw: JSON.stringify({\r",
							"                                                    \"data\": [{\r",
							"                                                        \"Lease_Period\": leasePeriod\r",
							"                                                    }]\r",
							"                                                })\r",
							"                                            }\r",
							"                                        }, function(err, updateTruckResponse) {\r",
							"                                            if (err) {\r",
							"                                                console.error('Error:', err);\r",
							"                                                return;\r",
							"                                            }\r",
							"                                            console.log('Response:', updateTruckResponse.json());\r",
							"                                        });\r",
							"                                    }\r",
							"                                // }\r",
							"                            }\r",
							"                            sendRequestWithDelay(index + 1); // Call the next request\r",
							"                        });\r",
							"                    }, delayBetweenRequests);\r",
							"                }\r",
							"            }\r",
							"            count = count + 1;\r",
							"        }\r",
							"\r",
							"        // Start sending requests\r",
							"        sendRequestWithDelay(0);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"searchID\": \"customsearch1048\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
					"protocol": "https",
					"host": [
						"7936739",
						"restlets",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"app",
						"site",
						"hosting",
						"restlet.nl"
					],
					"query": [
						{
							"key": "script",
							"value": "1001"
						},
						{
							"key": "deploy",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Monthly Loan Financials - Collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cyptojs = require('crypto-js');\r",
							"\r",
							"let tokenClientIDStr = 'prod_ns_token_client_id';\r",
							"let tokenClientSecretStr = 'prod_ns_token_client_secret';\r",
							"let tokenIDStr = 'PROD_NS_TOKEN_ID';\r",
							"let tokenSecretStr = 'PROD_NS_TOKEN_SECRET';\r",
							"let acctIDStr = 'PROD_NS_ACCOUNT_ID';\r",
							"let ns_acct_url_id = \"7936739\";\r",
							"let custom_search_script_id = \"1001\";\r",
							"let custom_search_col_script_id = \"1002\";\r",
							"\r",
							"pm.environment.set(\"ns_acct_url_id\", ns_acct_url_id);\r",
							"pm.environment.set(\"custom_search_script_id\", custom_search_script_id);\r",
							"pm.environment.set(\"custom_search_col_script_id\", custom_search_col_script_id);\r",
							"\r",
							"const oauth_consumer_key = pm.environment.get(tokenClientIDStr);  \r",
							"const oauth_consumer_secret = pm.environment.get(tokenClientSecretStr);\r",
							"const oauth_token_id = pm.environment.get(tokenIDStr);\r",
							"const oauth_token_secret = pm.environment.get(tokenSecretStr);\r",
							"const oauth_account_id = pm.environment.get(acctIDStr); \r",
							"\r",
							"const oauth_signing_key = `${encodeURIComponent(oauth_consumer_secret)}&${encodeURIComponent(oauth_token_secret)}`;\r",
							"\r",
							"const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"let oauth_nonce = '';\r",
							"for (var i = 0; i < 32; i++) {\r",
							"    oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));\r",
							"}\r",
							"const oauth_nonce_array = cyptojs.enc.Utf8.parse(oauth_nonce);\r",
							"const oauth_nonce_final = encodeURIComponent(cyptojs.enc.Base64.stringify(oauth_nonce_array));\r",
							"\r",
							"const oauth_parameter_string_object = {};\r",
							"\r",
							"oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;\r",
							"oauth_parameter_string_object.oauth_token = oauth_token_id;\r",
							"\r",
							"oauth_parameter_string_object.oauth_nonce = oauth_nonce_final;\r",
							"\r",
							"oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);\r",
							"\r",
							"oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA256';\r",
							"\r",
							"oauth_parameter_string_object.oauth_version = '1.0';\r",
							"\r",
							"const oauth_authorization_header_object = {};\r",
							"for (var key in oauth_parameter_string_object) {\r",
							"    oauth_authorization_header_object[key] = oauth_parameter_string_object[key];\r",
							"}\r",
							"\r",
							"oauth_authorization_header_object.realm = oauth_account_id;\r",
							"\r",
							"const url_query_string = pm.request.url.getQueryString({  // Postman method to get query string\r",
							"    ignoreDisabled: true\r",
							"});\r",
							"\r",
							"let url_query_string_array = [];\r",
							"\r",
							"if (url_query_string != \"\"){\r",
							"    url_query_string_array = url_query_string.split('&');\r",
							"}\r",
							"\r",
							"let url_query_string_object = {};\r",
							"if (url_query_string !== \"\") {\r",
							"    url_query_string_object = JSON.parse(`{\"${url_query_string.replace(/&/g, '\",\"').replace(/=/g,'\":\"')}\"}`, function(key, value) {return key === \"\" ? value : encodeURIComponent(value)});\r",
							"}\r",
							"\r",
							"// parse request.params\r",
							"for (var key in url_query_string_object) {;\r",
							"    if(url_query_string_object[key] == \"%7B%7Bcustom_search_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_script_id;\r",
							"    } else if (url_query_string_object[key] == \"%7B%7Bcustom_search_col_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_col_script_id;\r",
							"    }\r",
							"    oauth_parameter_string_object[key] = url_query_string_object[key];\r",
							"    \r",
							"}\r",
							"\r",
							"// sort object by key\r",
							"const oauth_parameter_string_object_ordered = {};\r",
							"Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {\r",
							"    oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];\r",
							"});\r",
							"\r",
							"// convert object into array\r",
							"const oauth_parameter_string_array = [];\r",
							"for (var key in oauth_parameter_string_object_ordered) {\r",
							"    oauth_parameter_string_array.push(`${key}=${oauth_parameter_string_object_ordered[key]}`);\r",
							"}\r",
							"\r",
							"// generate parameter string\r",
							"const oauth_parameter_string = oauth_parameter_string_array.join('&');\r",
							"\r",
							"let base_host = pm.request.url.getOAuth1BaseUrl();\r",
							"let regexp = /{{(.*?)}}/g;\r",
							"while (result = regexp.exec(base_host)) {\r",
							"    let value = pm.environment.get(result[1]);\r",
							"    base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);\r",
							"}\r",
							"\r",
							"const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;\r",
							"let oauth_signature = cyptojs.HmacSHA256(oauth_base_string, oauth_signing_key).toString(cyptojs.enc.Base64);\r",
							"oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);\r",
							"\r",
							"// convert object into array (for Authorization header string)\r",
							"const oauth_authorization_header_array = [];\r",
							"for (var key in oauth_authorization_header_object) {\r",
							"    oauth_authorization_header_array.push(`${key}=\"${oauth_authorization_header_object[key]}\"`);\r",
							"}\r",
							"\r",
							"const oauth_authorization_header = oauth_authorization_header_array.join(', ');\r",
							"\r",
							"// generate Authorization header, FINALLY!\r",
							"pm.request.headers.add({\r",
							"    key: 'Authorization',\r",
							"    value: 'OAuth ' + oauth_authorization_header\r",
							"});\r",
							"\r",
							"// Escape URI parameters using encodeURIComponent => RFC3986\r",
							"// This is encoding the query string params in the request.\r",
							"if (url_query_string_array.length !== 0) {\r",
							"    let request_parameter_array = [];\r",
							"    for (var key in url_query_string_object) {\r",
							"        request_parameter_array.push(key + '=' + url_query_string_object[key]);\r",
							"    }\r",
							"    const request_parameter_string = request_parameter_array.join('&');\r",
							"\r",
							"    pm.request.url = pm.request.url.getOAuth1BaseUrl() + \"?\" + request_parameter_string;\r",
							"}\r",
							"\r",
							"var requestGetToken = {\r",
							"    url: 'https://accounts.zoho.com/oauth/v2/token?client_id=' + pm.environment.get(\"prod_zoho_client_id\") + '&client_secret=' + pm.environment.get(\"prod_zoho_client_secret\") + '&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL&soid=ZohoCRM.747501552',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetToken, function (err, tokenResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response:', tokenResponse.json());\r",
							"    var parsedToken = tokenResponse.json();\r",
							"    console.log(parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"zoho_access_token\",accessToken);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the delay between each request (in milliseconds)\r",
							"var delayBetweenRequests = 1000; // 1 second delay\r",
							"\r",
							"var accessToken = pm.variables.get(\"zoho_access_token\");\r",
							"console.log(\"accessToken: \" + accessToken);\r",
							"console.log(\"access collection token: \" + pm.variables.get(\"zoho_access_token\"));\r",
							"var jsonData = pm.response.json();\r",
							"var results = jsonData.results;\r",
							"// console.log(\"results: \" + JSON.stringify(results));\r",
							"if (results) {\r",
							"    let count = 1;\r",
							"    if(accessToken !== null)\r",
							"    {\r",
							"        function sendRequestWithDelay(index) {\r",
							"            // if (index < results.length) {\r",
							"            if (index < results.length && count <= 1) {\r",
							"                let result_obj = results[index];\r",
							"                let values = result_obj.values;\r",
							"                let relMonthlyPmt = values['custrecord_da_loan_payment'];\r",
							"                let remRELObligation = values['custrecord_da_loan_current_balance'];\r",
							"                let acqCost = values['custrecord_da_loan_initial_balance'];\r",
							"                let truckVIN = values['custrecord_ln_vin'];\r",
							"\r",
							"                if (truckVIN !== null) {\r",
							"                    var requestGetTruck = {\r",
							"                        url: 'https://www.zohoapis.com/crm/v6/Trucks/search?criteria=(Name%3Aequals%3A' + truckVIN + ')&fields=id',\r",
							"                        method: 'GET',\r",
							"                        header: {\r",
							"                            'Content-Type': 'application/json',\r",
							"                            'Authorization': 'Bearer ' + accessToken,\r",
							"                        }\r",
							"                    };\r",
							"\r",
							"                    setTimeout(() => {\r",
							"                        pm.sendRequest(requestGetTruck, function(err, truckResponse) {\r",
							"                            if (err) {\r",
							"                                console.error('Error:', err);\r",
							"                                return;\r",
							"                            }\r",
							"                            if (truckResponse.code === 204) {\r",
							"                                console.log('204 No Content Received');\r",
							"                            } else if (truckResponse.code === 401) {\r",
							"                                console.log(\"Invalid response: \" + truckResponse.json().message);\r",
							"                            } else if (truckResponse.code === 200) {\r",
							"                                var parsedTruck = truckResponse.json();\r",
							"                                console.log('Response:', truckResponse.json());\r",
							"                                // if (parsedTruck !== null || parsedTruck != '') {\r",
							"                                    var truckData = parsedTruck.data;\r",
							"                                    console.log(truckData);\r",
							"                                    var truckID = truckData[0].id;\r",
							"                                    console.log(truckID);\r",
							"                                    if (truckID !== null) {\r",
							"                                        pm.sendRequest({\r",
							"                                            url: 'https://www.zohoapis.com/crm/v6/Trucks/' + truckID,\r",
							"                                            method: 'PUT',\r",
							"                                            header: {\r",
							"                                                'Content-Type': 'application/json',\r",
							"                                                'Authorization': 'Bearer ' + accessToken\r",
							"                                            },\r",
							"                                            body: {\r",
							"                                                mode: 'raw',\r",
							"                                                raw: JSON.stringify({\r",
							"                                                    \"data\": [{\r",
							"                                                        \"REL_Monthly_Pmt\": relMonthlyPmt,\r",
							"                                                        \"Remaining_REL_Obligation\": remRELObligation,\r",
							"                                                        \"Acquisition_Cost\": acqCost\r",
							"                                                    }]\r",
							"                                                })\r",
							"                                            }\r",
							"                                        }, function(err, updateTruckResponse) {\r",
							"                                            if (err) {\r",
							"                                                console.error('Error:', err);\r",
							"                                                return;\r",
							"                                            }\r",
							"                                            console.log('Response:', updateTruckResponse.json());\r",
							"                                        });\r",
							"                                    }\r",
							"                                // }\r",
							"                            }\r",
							"                            sendRequestWithDelay(index + 1); // Call the next request\r",
							"                        });\r",
							"                    }, delayBetweenRequests);\r",
							"                }\r",
							"            }\r",
							"            count = count + 1;\r",
							"        }\r",
							"\r",
							"        // Start sending requests\r",
							"        sendRequestWithDelay(0);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"searchID\": \"customsearch1037\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
					"protocol": "https",
					"host": [
						"7936739",
						"restlets",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"app",
						"site",
						"hosting",
						"restlet.nl"
					],
					"query": [
						{
							"key": "script",
							"value": "1001"
						},
						{
							"key": "deploy",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Property Tax Escrow - Collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cyptojs = require('crypto-js');\r",
							"\r",
							"let tokenClientIDStr = 'prod_ns_token_client_id';\r",
							"let tokenClientSecretStr = 'prod_ns_token_client_secret';\r",
							"let tokenIDStr = 'PROD_NS_TOKEN_ID';\r",
							"let tokenSecretStr = 'PROD_NS_TOKEN_SECRET';\r",
							"let acctIDStr = 'PROD_NS_ACCOUNT_ID';\r",
							"let ns_acct_url_id = \"7936739\";\r",
							"let custom_search_script_id = \"1001\";\r",
							"let custom_search_col_script_id = \"1002\";\r",
							"\r",
							"pm.environment.set(\"ns_acct_url_id\", ns_acct_url_id);\r",
							"pm.environment.set(\"custom_search_script_id\", custom_search_script_id);\r",
							"pm.environment.set(\"custom_search_col_script_id\", custom_search_col_script_id);\r",
							"\r",
							"const oauth_consumer_key = pm.environment.get(tokenClientIDStr);  \r",
							"const oauth_consumer_secret = pm.environment.get(tokenClientSecretStr);\r",
							"const oauth_token_id = pm.environment.get(tokenIDStr);\r",
							"const oauth_token_secret = pm.environment.get(tokenSecretStr);\r",
							"const oauth_account_id = pm.environment.get(acctIDStr); \r",
							"\r",
							"const oauth_signing_key = `${encodeURIComponent(oauth_consumer_secret)}&${encodeURIComponent(oauth_token_secret)}`;\r",
							"\r",
							"const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"let oauth_nonce = '';\r",
							"for (var i = 0; i < 32; i++) {\r",
							"    oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));\r",
							"}\r",
							"const oauth_nonce_array = cyptojs.enc.Utf8.parse(oauth_nonce);\r",
							"const oauth_nonce_final = encodeURIComponent(cyptojs.enc.Base64.stringify(oauth_nonce_array));\r",
							"\r",
							"const oauth_parameter_string_object = {};\r",
							"\r",
							"oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;\r",
							"oauth_parameter_string_object.oauth_token = oauth_token_id;\r",
							"\r",
							"oauth_parameter_string_object.oauth_nonce = oauth_nonce_final;\r",
							"\r",
							"oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);\r",
							"\r",
							"oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA256';\r",
							"\r",
							"oauth_parameter_string_object.oauth_version = '1.0';\r",
							"\r",
							"const oauth_authorization_header_object = {};\r",
							"for (var key in oauth_parameter_string_object) {\r",
							"    oauth_authorization_header_object[key] = oauth_parameter_string_object[key];\r",
							"}\r",
							"\r",
							"oauth_authorization_header_object.realm = oauth_account_id;\r",
							"\r",
							"const url_query_string = pm.request.url.getQueryString({  // Postman method to get query string\r",
							"    ignoreDisabled: true\r",
							"});\r",
							"\r",
							"let url_query_string_array = [];\r",
							"\r",
							"if (url_query_string != \"\"){\r",
							"    url_query_string_array = url_query_string.split('&');\r",
							"}\r",
							"\r",
							"let url_query_string_object = {};\r",
							"if (url_query_string !== \"\") {\r",
							"    url_query_string_object = JSON.parse(`{\"${url_query_string.replace(/&/g, '\",\"').replace(/=/g,'\":\"')}\"}`, function(key, value) {return key === \"\" ? value : encodeURIComponent(value)});\r",
							"}\r",
							"\r",
							"// parse request.params\r",
							"for (var key in url_query_string_object) {;\r",
							"    if(url_query_string_object[key] == \"%7B%7Bcustom_search_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_script_id;\r",
							"    } else if (url_query_string_object[key] == \"%7B%7Bcustom_search_col_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_col_script_id;\r",
							"    }\r",
							"    oauth_parameter_string_object[key] = url_query_string_object[key];\r",
							"    \r",
							"}\r",
							"\r",
							"// sort object by key\r",
							"const oauth_parameter_string_object_ordered = {};\r",
							"Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {\r",
							"    oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];\r",
							"});\r",
							"\r",
							"// convert object into array\r",
							"const oauth_parameter_string_array = [];\r",
							"for (var key in oauth_parameter_string_object_ordered) {\r",
							"    oauth_parameter_string_array.push(`${key}=${oauth_parameter_string_object_ordered[key]}`);\r",
							"}\r",
							"\r",
							"// generate parameter string\r",
							"const oauth_parameter_string = oauth_parameter_string_array.join('&');\r",
							"\r",
							"let base_host = pm.request.url.getOAuth1BaseUrl();\r",
							"let regexp = /{{(.*?)}}/g;\r",
							"while (result = regexp.exec(base_host)) {\r",
							"    let value = pm.environment.get(result[1]);\r",
							"    base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);\r",
							"}\r",
							"\r",
							"const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;\r",
							"let oauth_signature = cyptojs.HmacSHA256(oauth_base_string, oauth_signing_key).toString(cyptojs.enc.Base64);\r",
							"oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);\r",
							"\r",
							"// convert object into array (for Authorization header string)\r",
							"const oauth_authorization_header_array = [];\r",
							"for (var key in oauth_authorization_header_object) {\r",
							"    oauth_authorization_header_array.push(`${key}=\"${oauth_authorization_header_object[key]}\"`);\r",
							"}\r",
							"\r",
							"const oauth_authorization_header = oauth_authorization_header_array.join(', ');\r",
							"\r",
							"// generate Authorization header, FINALLY!\r",
							"pm.request.headers.add({\r",
							"    key: 'Authorization',\r",
							"    value: 'OAuth ' + oauth_authorization_header\r",
							"});\r",
							"\r",
							"// Escape URI parameters using encodeURIComponent => RFC3986\r",
							"// This is encoding the query string params in the request.\r",
							"if (url_query_string_array.length !== 0) {\r",
							"    let request_parameter_array = [];\r",
							"    for (var key in url_query_string_object) {\r",
							"        request_parameter_array.push(key + '=' + url_query_string_object[key]);\r",
							"    }\r",
							"    const request_parameter_string = request_parameter_array.join('&');\r",
							"\r",
							"    pm.request.url = pm.request.url.getOAuth1BaseUrl() + \"?\" + request_parameter_string;\r",
							"}\r",
							"\r",
							"var requestGetToken = {\r",
							"    url: 'https://accounts.zoho.com/oauth/v2/token?client_id=' + pm.environment.get(\"prod_zoho_client_id\") + '&client_secret=' + pm.environment.get(\"prod_zoho_client_secret\") + '&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL&soid=ZohoCRM.747501552',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetToken, function (err, tokenResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response:', tokenResponse.json());\r",
							"    var parsedToken = tokenResponse.json();\r",
							"    console.log(parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"zoho_access_token\",accessToken);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the delay between each request (in milliseconds)\r",
							"var delayBetweenRequests = 1000; // 1 second delay\r",
							"\r",
							"var accessToken = pm.variables.get(\"zoho_access_token\");\r",
							"console.log(\"accessToken: \" + accessToken);\r",
							"console.log(\"access collection token: \" + pm.variables.get(\"zoho_access_token\"));\r",
							"var jsonData = pm.response.json();\r",
							"var results = jsonData.results;\r",
							"// console.log(\"results: \" + JSON.stringify(results));\r",
							"if (results) {\r",
							"    let count = 1;\r",
							"    if(accessToken !== null)\r",
							"    {\r",
							"        function sendRequestWithDelay(index) {\r",
							"            if (index < results.length) {\r",
							"            // if (index < results.length && count <= 1) {\r",
							"                let result_obj = results[index];\r",
							"                let values = result_obj.values;\r",
							"                console.log(values);\r",
							"                let taxEscrow = values['SUM(grossamount)'];\r",
							"                let truckVIN = values['GROUP(custcol1)'];\r",
							"                const moment = require('moment');\r",
							"                let today = moment().format(\"YYYY-MM-DD\");\r",
							"\r",
							"                if (truckVIN !== null) {\r",
							"                    var requestGetTruck = {\r",
							"                        url: 'https://www.zohoapis.com/crm/v6/Trucks/search?criteria=(Name%3Aequals%3A' + truckVIN + ')&fields=id',\r",
							"                        method: 'GET',\r",
							"                        header: {\r",
							"                            'Content-Type': 'application/json',\r",
							"                            'Authorization': 'Bearer ' + accessToken,\r",
							"                        }\r",
							"                    };\r",
							"\r",
							"                    setTimeout(() => {\r",
							"                        pm.sendRequest(requestGetTruck, function(err, truckResponse) {\r",
							"                            if (err) {\r",
							"                                console.error('Error:', err);\r",
							"                                return;\r",
							"                            }\r",
							"                            if (truckResponse.code === 204) {\r",
							"                                console.log('204 No Content Received');\r",
							"                            } else if (truckResponse.code === 401) {\r",
							"                                console.log(\"Invalid response: \" + truckResponse.json().message);\r",
							"                            } else if (truckResponse.code === 200) {\r",
							"                                var parsedTruck = truckResponse.json();\r",
							"                                console.log('Response:', truckResponse.json());\r",
							"                                // if (parsedTruck !== null || parsedTruck != '') {\r",
							"                                    var truckData = parsedTruck.data;\r",
							"                                    console.log(truckData);\r",
							"                                    var truckID = truckData[0].id;\r",
							"                                    console.log(truckID);\r",
							"                                    if (truckID !== null) {\r",
							"                                        pm.sendRequest({\r",
							"                                            url: 'https://www.zohoapis.com/crm/v6/Trucks/' + truckID,\r",
							"                                            method: 'PUT',\r",
							"                                            header: {\r",
							"                                                'Content-Type': 'application/json',\r",
							"                                                'Authorization': 'Bearer ' + accessToken\r",
							"                                            },\r",
							"                                            body: {\r",
							"                                                mode: 'raw',\r",
							"                                                raw: JSON.stringify({\r",
							"                                                    \"data\": [{\r",
							"                                                        \"Escrow\": taxEscrow,\r",
							"                                                        \"Last_Update_Escrow\": today\r",
							"                                                    }]\r",
							"                                                })\r",
							"                                            }\r",
							"                                        }, function(err, updateTruckResponse) {\r",
							"                                            if (err) {\r",
							"                                                console.error('Error:', err);\r",
							"                                                return;\r",
							"                                            }\r",
							"                                            console.log('Response:', updateTruckResponse.json());\r",
							"                                        });\r",
							"                                    }\r",
							"                                // }\r",
							"                            }\r",
							"                            sendRequestWithDelay(index + 1); // Call the next request\r",
							"                        });\r",
							"                    }, delayBetweenRequests);\r",
							"                }\r",
							"            }\r",
							"            count = count + 1;\r",
							"        }\r",
							"\r",
							"        // Start sending requests\r",
							"        sendRequestWithDelay(0);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"searchID\": \"customsearch1095\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
					"protocol": "https",
					"host": [
						"7936739",
						"restlets",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"app",
						"site",
						"hosting",
						"restlet.nl"
					],
					"query": [
						{
							"key": "script",
							"value": "1001"
						},
						{
							"key": "deploy",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Truck Escrow - Collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cyptojs = require('crypto-js');\r",
							"\r",
							"let tokenClientIDStr = 'prod_ns_token_client_id';\r",
							"let tokenClientSecretStr = 'prod_ns_token_client_secret';\r",
							"let tokenIDStr = 'PROD_NS_TOKEN_ID';\r",
							"let tokenSecretStr = 'PROD_NS_TOKEN_SECRET';\r",
							"let acctIDStr = 'PROD_NS_ACCOUNT_ID';\r",
							"let ns_acct_url_id = \"7936739\";\r",
							"let custom_search_script_id = \"1001\";\r",
							"let custom_search_col_script_id = \"1002\";\r",
							"\r",
							"pm.environment.set(\"ns_acct_url_id\", ns_acct_url_id);\r",
							"pm.environment.set(\"custom_search_script_id\", custom_search_script_id);\r",
							"pm.environment.set(\"custom_search_col_script_id\", custom_search_col_script_id);\r",
							"\r",
							"const oauth_consumer_key = pm.environment.get(tokenClientIDStr);  \r",
							"const oauth_consumer_secret = pm.environment.get(tokenClientSecretStr);\r",
							"const oauth_token_id = pm.environment.get(tokenIDStr);\r",
							"const oauth_token_secret = pm.environment.get(tokenSecretStr);\r",
							"const oauth_account_id = pm.environment.get(acctIDStr); \r",
							"\r",
							"const oauth_signing_key = `${encodeURIComponent(oauth_consumer_secret)}&${encodeURIComponent(oauth_token_secret)}`;\r",
							"\r",
							"const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"let oauth_nonce = '';\r",
							"for (var i = 0; i < 32; i++) {\r",
							"    oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));\r",
							"}\r",
							"const oauth_nonce_array = cyptojs.enc.Utf8.parse(oauth_nonce);\r",
							"const oauth_nonce_final = encodeURIComponent(cyptojs.enc.Base64.stringify(oauth_nonce_array));\r",
							"\r",
							"const oauth_parameter_string_object = {};\r",
							"\r",
							"oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;\r",
							"oauth_parameter_string_object.oauth_token = oauth_token_id;\r",
							"\r",
							"oauth_parameter_string_object.oauth_nonce = oauth_nonce_final;\r",
							"\r",
							"oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);\r",
							"\r",
							"oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA256';\r",
							"\r",
							"oauth_parameter_string_object.oauth_version = '1.0';\r",
							"\r",
							"const oauth_authorization_header_object = {};\r",
							"for (var key in oauth_parameter_string_object) {\r",
							"    oauth_authorization_header_object[key] = oauth_parameter_string_object[key];\r",
							"}\r",
							"\r",
							"oauth_authorization_header_object.realm = oauth_account_id;\r",
							"\r",
							"const url_query_string = pm.request.url.getQueryString({  // Postman method to get query string\r",
							"    ignoreDisabled: true\r",
							"});\r",
							"\r",
							"let url_query_string_array = [];\r",
							"\r",
							"if (url_query_string != \"\"){\r",
							"    url_query_string_array = url_query_string.split('&');\r",
							"}\r",
							"\r",
							"let url_query_string_object = {};\r",
							"if (url_query_string !== \"\") {\r",
							"    url_query_string_object = JSON.parse(`{\"${url_query_string.replace(/&/g, '\",\"').replace(/=/g,'\":\"')}\"}`, function(key, value) {return key === \"\" ? value : encodeURIComponent(value)});\r",
							"}\r",
							"\r",
							"// parse request.params\r",
							"for (var key in url_query_string_object) {;\r",
							"    if(url_query_string_object[key] == \"%7B%7Bcustom_search_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_script_id;\r",
							"    } else if (url_query_string_object[key] == \"%7B%7Bcustom_search_col_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_col_script_id;\r",
							"    }\r",
							"    oauth_parameter_string_object[key] = url_query_string_object[key];\r",
							"    \r",
							"}\r",
							"\r",
							"// sort object by key\r",
							"const oauth_parameter_string_object_ordered = {};\r",
							"Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {\r",
							"    oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];\r",
							"});\r",
							"\r",
							"// convert object into array\r",
							"const oauth_parameter_string_array = [];\r",
							"for (var key in oauth_parameter_string_object_ordered) {\r",
							"    oauth_parameter_string_array.push(`${key}=${oauth_parameter_string_object_ordered[key]}`);\r",
							"}\r",
							"\r",
							"// generate parameter string\r",
							"const oauth_parameter_string = oauth_parameter_string_array.join('&');\r",
							"\r",
							"let base_host = pm.request.url.getOAuth1BaseUrl();\r",
							"let regexp = /{{(.*?)}}/g;\r",
							"while (result = regexp.exec(base_host)) {\r",
							"    let value = pm.environment.get(result[1]);\r",
							"    base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);\r",
							"}\r",
							"\r",
							"const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;\r",
							"let oauth_signature = cyptojs.HmacSHA256(oauth_base_string, oauth_signing_key).toString(cyptojs.enc.Base64);\r",
							"oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);\r",
							"\r",
							"// convert object into array (for Authorization header string)\r",
							"const oauth_authorization_header_array = [];\r",
							"for (var key in oauth_authorization_header_object) {\r",
							"    oauth_authorization_header_array.push(`${key}=\"${oauth_authorization_header_object[key]}\"`);\r",
							"}\r",
							"\r",
							"const oauth_authorization_header = oauth_authorization_header_array.join(', ');\r",
							"\r",
							"// generate Authorization header, FINALLY!\r",
							"pm.request.headers.add({\r",
							"    key: 'Authorization',\r",
							"    value: 'OAuth ' + oauth_authorization_header\r",
							"});\r",
							"\r",
							"// Escape URI parameters using encodeURIComponent => RFC3986\r",
							"// This is encoding the query string params in the request.\r",
							"if (url_query_string_array.length !== 0) {\r",
							"    let request_parameter_array = [];\r",
							"    for (var key in url_query_string_object) {\r",
							"        request_parameter_array.push(key + '=' + url_query_string_object[key]);\r",
							"    }\r",
							"    const request_parameter_string = request_parameter_array.join('&');\r",
							"\r",
							"    pm.request.url = pm.request.url.getOAuth1BaseUrl() + \"?\" + request_parameter_string;\r",
							"}\r",
							"\r",
							"var requestGetToken = {\r",
							"    url: 'https://accounts.zoho.com/oauth/v2/token?client_id=' + pm.environment.get(\"prod_zoho_client_id\") + '&client_secret=' + pm.environment.get(\"prod_zoho_client_secret\") + '&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL&soid=ZohoCRM.747501552',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetToken, function (err, tokenResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response:', tokenResponse.json());\r",
							"    var parsedToken = tokenResponse.json();\r",
							"    console.log(parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"zoho_access_token\",accessToken);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the delay between each request (in milliseconds)\r",
							"var delayBetweenRequests = 500; // 1 second delay\r",
							"\r",
							"var accessToken = pm.variables.get(\"zoho_access_token\");\r",
							"console.log(\"accessToken: \" + accessToken);\r",
							"console.log(\"access collection token: \" + pm.variables.get(\"zoho_access_token\"));\r",
							"var jsonData = pm.response.json();\r",
							"var results = jsonData.results;\r",
							"// console.log(\"results: \" + JSON.stringify(results));\r",
							"if (results) {\r",
							"    let count = 1;\r",
							"    if(accessToken !== null)\r",
							"    {\r",
							"        function sendRequestWithDelay(index) {\r",
							"            if (index < results.length) {\r",
							"            // if (index < results.length && count <= 10) {\r",
							"                let escrow_obj = results[index];\r",
							"                let values = escrow_obj.values;\r",
							"                let sumAmount = values['SUM(amount)'];\r",
							"                let truckVIN = values['GROUP(custcol1)'];\r",
							"                const moment = require('moment');\r",
							"                const today = encodeURIComponent(moment().format(\"YYYY-MM-DD\"));\r",
							"\r",
							"                if (truckVIN !== null) {\r",
							"                    var requestGetTruck = {\r",
							"                        url: 'https://www.zohoapis.com/crm/v6/Trucks/search?criteria=((Name%3Aequals%3A' + truckVIN + ')and(Last_Update_Escrow%3Aless_than%3A' + today + '))',\r",
							"                        method: 'GET',\r",
							"                        header: {\r",
							"                            'Content-Type': 'application/json',\r",
							"                            'Authorization': 'Bearer ' + accessToken,\r",
							"                        }\r",
							"                    };\r",
							"\r",
							"                    setTimeout(() => {\r",
							"                        pm.sendRequest(requestGetTruck, function(err, truckResponse) {\r",
							"                            if (err) {\r",
							"                                console.error('Error:', err);\r",
							"                                return;\r",
							"                            }\r",
							"                            if (truckResponse.code === 204) {\r",
							"                                console.log('204 No Content Received');\r",
							"                            } else if (truckResponse.code === 401) {\r",
							"                                console.log(\"Invalid response: \" + truckResponse.json().message);\r",
							"                            } else if (truckResponse.code === 200) {\r",
							"                                var parsedTruck = truckResponse.json();\r",
							"                                console.log('Response:', truckResponse.json());\r",
							"                                // if (parsedTruck !== null || parsedTruck != '') {\r",
							"                                    var truckData = parsedTruck.data;\r",
							"                                    console.log(truckData);\r",
							"                                    var truckID = truckData[0].id;\r",
							"                                    console.log(truckID);\r",
							"                                    if (truckID !== null) {\r",
							"                                        pm.sendRequest({\r",
							"                                            url: 'https://www.zohoapis.com/crm/v6/Trucks/' + truckID,\r",
							"                                            method: 'PUT',\r",
							"                                            header: {\r",
							"                                                'Content-Type': 'application/json',\r",
							"                                                'Authorization': 'Bearer ' + accessToken\r",
							"                                            },\r",
							"                                            body: {\r",
							"                                                mode: 'raw',\r",
							"                                                raw: JSON.stringify({\r",
							"                                                    \"data\": [{\r",
							"                                                        \"Escrow\": sumAmount,\r",
							"                                                        \"Last_Update_Escrow\": today\r",
							"                                                    }]\r",
							"                                                })\r",
							"                                            }\r",
							"                                        }, function(err, updateTruckResponse) {\r",
							"                                            if (err) {\r",
							"                                                console.error('Error:', err);\r",
							"                                                return;\r",
							"                                            }\r",
							"                                            console.log('Response:', updateTruckResponse.json());\r",
							"                                        });\r",
							"                                    }\r",
							"                                // }\r",
							"                            }\r",
							"                            sendRequestWithDelay(index + 1); // Call the next request\r",
							"                        });\r",
							"                    }, delayBetweenRequests);\r",
							"                }\r",
							"            }\r",
							"            count = count + 1;\r",
							"        }\r",
							"\r",
							"        // Start sending requests\r",
							"        sendRequestWithDelay(0);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"searchID\": \"customsearch985\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
					"protocol": "https",
					"host": [
						"7936739",
						"restlets",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"app",
						"site",
						"hosting",
						"restlet.nl"
					],
					"query": [
						{
							"key": "script",
							"value": "1001"
						},
						{
							"key": "deploy",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ns_acct_url_id",
			"value": ""
		},
		{
			"key": "custom_search_script_id",
			"value": ""
		},
		{
			"key": "custom_search_col_script_id",
			"value": ""
		},
		{
			"key": "prod_ns_token_client_id",
			"value": "e0d375ed0ba5e0bf3792e2dd3e5c1e86925f49e8b82322cab5b7bc7de8b1675e",
			"type": "string"
		},
		{
			"key": "prod_ns_token_client_secret",
			"value": "98f03cdd7836e76a50cfe0a6709fa7ccc0b89def10a7a68bf1813f6d8304e63f",
			"type": "string"
		}
	]
}