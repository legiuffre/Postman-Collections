{
	"info": {
		"_postman_id": "c8d14a2a-92b5-44e9-a333-e1c23b2b8ead",
		"name": "zCR - Pull Zonar Weeks into Analytics",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28539332",
		"_collection_link": "https://team-rel.postman.co/workspace/Team-REL~69846068-eace-44a2-859b-d7fdf1b963c6/collection/28539332-c8d14a2a-92b5-44e9-a333-e1c23b2b8ead?action=share&source=collection_link&creator=28539332"
	},
	"item": [
		{
			"name": "POST Pull Zonar Info into Analytics - Collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Function to format the date in YYYY-MM-DD format\r",
							"function formatDate(date) {\r",
							"    const year = date.getFullYear();\r",
							"    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based, so add 1\r",
							"    const day = String(date.getDate()).padStart(2, '0');\r",
							"    return `${year}-${month}-${day}`;\r",
							"}\r",
							"\r",
							"// Format the current date\r",
							"const xml2js = require('xml2js');\r",
							"\r",
							"// Function to parse XML string\r",
							"function parseXml(xmlString) {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        xml2js.parseString(xmlString, { explicitArray: false }, (err, result) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                resolve(result);\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// Helper Function: Build Query String\r",
							"function buildQueryString(params) {\r",
							"    return Object.keys(params)\r",
							"        .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))\r",
							"        .join('&');\r",
							"}\r",
							"\r",
							"// Main Function: Fetch Zonar Data\r",
							"function fetchZonarData(paramMap) {\r",
							"    const queryParams = buildQueryString(paramMap);\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `https://omi.zonarsystems.net/interface.php?${queryParams}`,\r",
							"            method: 'GET',\r",
							"            timeout: 5000\r",
							"        }, (err, response) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                resolve(response.text());\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// Function to process Analytics Update with rate limit\r",
							"function processAnalyticsUpdateQueue(analyticsDataQueue) {\r",
							"    let requestInterval = 1200; // Time interval between requests in milliseconds\r",
							"    let queueIndex = 0;\r",
							"\r",
							"    const intervalId = setInterval(() => {\r",
							"        if (queueIndex >= analyticsDataQueue.length) {\r",
							"            clearInterval(intervalId); // Stop the interval when all items in the queue have been processed\r",
							"            console.log(\"All analytics updates processed.\");\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        const data = analyticsDataQueue[queueIndex];\r",
							"        const encodedAnalyticsData = encodeURIComponent(JSON.stringify(data));\r",
							"\r",
							"        const analyticsRequestOptions = {\r",
							"            url: `https://analyticsapi.zoho.com/restapi/v2/workspaces/${pm.variables.get('workspaceID')}/views/${pm.variables.get('viewID')}/rows?CONFIG=${encodedAnalyticsData}`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Authorization': `Zoho-oauthtoken ${pm.variables.get('zoho_access_token')}`,\r",
							"                'ZANALYTICS-ORGID': '769480731'\r",
							"            }\r",
							"        };\r",
							"\r",
							"        pm.sendRequest(analyticsRequestOptions, function (err, res) {\r",
							"            if (err) {\r",
							"                console.error('Error updating Zoho Analytics:', err);\r",
							"            } else {\r",
							"                console.log('Zoho Analytics update response:', res.json());\r",
							"            }\r",
							"        });\r",
							"\r",
							"        queueIndex++;\r",
							"    }, requestInterval);\r",
							"}\r",
							"\r",
							"// Main Script Logic\r",
							"let perPage = 700; // Number of records to fetch per request\r",
							"let offset = 0; // Initial offset for pagination\r",
							"let totalProcessedRecords = 0; // Counter to track total processed records\r",
							"let recordLimit = 5;\r",
							"let zonarP = pm.environment.get(\"zonar_p\");\r",
							"let zonarU = pm.environment.get(\"zonar_u\");\r",
							"let enableEmails = true;\r",
							"let enableAnalyticsUpdate = true;\r",
							"let enableTestMode = false;\r",
							"\r",
							"// Initialize an empty queue for analytics data\r",
							"let analyticsDataQueue = [];\r",
							"\r",
							"// Function to handle the date looping from 7/28 to 9/9, in 7-day intervals (Saturday to Sunday)\r",
							"async function fetchTruckData() {\r",
							"    // Adjust the limit to make sure we do not exceed the number of records per request\r",
							"    let truckQueryStr = `SELECT Owner1.Account_Name as Account_Name, Owner1, Name, Truck_Year, Truck_Make, Truck_Model, Tractor_Type, Truck_Status, Zonar_GPS_ID, Non_Zonar FROM Trucks WHERE Truck_Status = '-Delivered' AND Zonar_GPS_ID is not null limit ${offset},${perPage}`;\r",
							"\r",
							"    // Send the COQL request\r",
							"    pm.sendRequest({\r",
							"        url: \"https://www.zohoapis.com/crm/v6/coql\",\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Authorization': `Zoho-oauthtoken ${pm.environment.get('zoho_access_token')}`,\r",
							"            'Content-Type': 'application/json'\r",
							"        },\r",
							"        body: JSON.stringify({\r",
							"            \"select_query\": truckQueryStr\r",
							"        })\r",
							"    }, async function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(\"Error fetching truck data:\", err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        let truckQryResp = res.json();\r",
							"        console.log(\"Record Count: \", truckQryResp.info.count);\r",
							"\r",
							"        // Loop through each truck record\r",
							"        for (const truck of truckQryResp.data) {\r",
							"            // Stop processing if the total number of processed records reaches the limit\r",
							"            if (totalProcessedRecords >= recordLimit && enableTestMode) {\r",
							"                break;\r",
							"            }\r",
							"\r",
							"            let gpsIDCheck = truck.Zonar_GPS_ID == null;\r",
							"            console.log(\"gpsID: \", truck.Zonar_GPS_ID);\r",
							"            if (!gpsIDCheck) {\r",
							"                totalProcessedRecords++; // Increment the total processed records\r",
							"\r",
							"                let vin = truck.Name;\r",
							"                let acctName = truck.Account_Name || null;\r",
							"                let acctID = truck.Owner1.id || null;\r",
							"                let truckYear = truck.Truck_Year || null;\r",
							"                let truckMake = truck.Truck_Make || null;\r",
							"                let truckModel = truck.Truck_Model || null;\r",
							"                let truckType = truck.Tractor_Type || null;\r",
							"                let truckStatus = truck.Truck_Status || null;\r",
							"                let zonarGPSID = truck.Zonar_GPS_ID || null;\r",
							"                let truckNonZonar = \"Yes\";\r",
							"\r",
							"                if (truck.Non_Zonar === false) {\r",
							"                    truckNonZonar = \"No\";\r",
							"                }\r",
							"\r",
							"                // Set the initial start and end dates for the date range (July 28 to September 9)\r",
							"                let startDate = new Date(2024, 6, 28); // July 28, 2024 (months are 0-indexed, so 6 is July)\r",
							"                let endDate = new Date(2024, 8, 9);   // September 9, 2024\r",
							"\r",
							"                // Find the first Saturday within the date range\r",
							"                let endingSaturday = new Date(startDate);\r",
							"                if (startDate.getDay() !== 6) { // 6 = Saturday\r",
							"                    const daysUntilSaturday = (6 - startDate.getDay() + 7) % 7 || 7;\r",
							"                    endingSaturday.setDate(startDate.getDate() + daysUntilSaturday);\r",
							"                }\r",
							"\r",
							"                let daysDifference = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));\r",
							"                let weeksDiff = Math.floor(daysDifference / 7);\r",
							"                let count = 0;\r",
							"\r",
							"                // Loop through each week from 7/28 to 9/9, processing each interval sequentially\r",
							"                for (let week = 0; week <= weeksDiff; week++) {\r",
							"                    let starttime = Math.floor(startDate.getTime() / 1000);\r",
							"                    let endtime = Math.floor(endingSaturday.getTime() / 1000);\r",
							"                    let formattedDate = formatDate(endingSaturday);\r",
							"\r",
							"                    // Prepare parameters for the Zonar API request\r",
							"                    let paramMap = {\r",
							"                        customer: \"rel9300\",\r",
							"                        username: zonarU,\r",
							"                        password: zonarP,\r",
							"                        action: \"showopen\",\r",
							"                        operation: \"jbustrip\",\r",
							"                        format: \"xml\",\r",
							"                        start: starttime.toString(),\r",
							"                        end: endtime.toString(),\r",
							"                        logvers: \"1\",\r",
							"                        reqtype: \"vin\",\r",
							"                        target: vin\r",
							"                    };\r",
							"\r",
							"                    // Fetch Zonar data using the refactored function\r",
							"                    try {\r",
							"                        const actResp = await fetchZonarData(paramMap);\r",
							"                        let errCheck = actResp.includes(\"error\");\r",
							"                        if (errCheck) {\r",
							"                            if (enableEmails) {\r",
							"                                pm.sendRequest({\r",
							"                                    url: `https://graph.microsoft.com/v1.0/users/${pm.environment.get('microsoft_user_id')}/sendMail`,\r",
							"                                    method: 'POST',\r",
							"                                    header: {\r",
							"                                        'Authorization': 'Bearer ' + pm.variables.get('microsoft_access_token'),\r",
							"                                        'Content-Type': 'application/json'\r",
							"                                    },\r",
							"                                    body: {\r",
							"                                        mode: 'raw',\r",
							"                                        raw: JSON.stringify({\r",
							"                                            \"message\": {\r",
							"                                                \"subject\": \"Zonar Analytics Update Failed\",\r",
							"                                                \"body\": {\r",
							"                                                    \"contentType\": \"html\",\r",
							"                                                    \"content\": `<html>Zonar Analytics Update Failed on ${vin}<br /><br />Error: ${actResp}</html>`\r",
							"                                                },\r",
							"                                                \"toRecipients\": [\r",
							"                                                    {\r",
							"                                                        \"emailAddress\": {\r",
							"                                                            \"address\": \"lgiuffre@teamrel.com\"\r",
							"                                                        }\r",
							"                                                    }\r",
							"                                                ]\r",
							"                                            },\r",
							"                                            \"saveToSentItems\": \"true\"\r",
							"                                        })\r",
							"                                    }\r",
							"                                });\r",
							"                            }\r",
							"                            console.log(\"Found Error\");\r",
							"                        } else {\r",
							"                            const xmlParsedActResp = await parseXml(actResp);\r",
							"                            const count = xmlParsedActResp.jbustrip.$.count;\r",
							"                            const trips = xmlParsedActResp.jbustrip.trip;\r",
							"\r",
							"                            if (count > 0 && enableAnalyticsUpdate) {\r",
							"                                let distance_traveled_7_days = 0;\r",
							"                                let converted_miles = 0;\r",
							"\r",
							"                                if (trips && Array.isArray(trips) && trips.length > 0) {\r",
							"                                    let totalMeters = 0;\r",
							"                                    for (let i = 0; i < trips.length; i++) {\r",
							"                                        const trip = trips[i];\r",
							"                                        const tripMiles = parseInt(trip.asset.miles); // Parse the miles as an integer\r",
							"                                        totalMeters += tripMiles;\r",
							"                                    }\r",
							"                                    converted_miles = totalMeters * 0.000621371; // Convert total meters to miles\r",
							"                                    distance_traveled_7_days = Math.round(converted_miles); // Round the converted miles\r",
							"                                } else if (trips && trips.asset) {\r",
							"                                    const singleTrip = trips;\r",
							"                                    const tripMiles = parseInt(singleTrip.asset.miles);\r",
							"                                    converted_miles = tripMiles * 0.000621371;\r",
							"                                    distance_traveled_7_days = Math.round(converted_miles);\r",
							"                                }\r",
							"\r",
							"                                console.log(\"Converted Miles: \", converted_miles);\r",
							"                                console.log(\"Distance Traveled in Last 7 Days: \", distance_traveled_7_days);\r",
							"\r",
							"                                const analyticsUpdateData = {\r",
							"                                    \"columns\":\r",
							"                                    {\r",
							"                                        \"Account Name\": acctName || null,\r",
							"                                        \"Account ID\": acctID || null,\r",
							"                                        \"VIN\": vin || null,\r",
							"                                        \"Truck Year\": truckYear || null,\r",
							"                                        \"Truck Make\": truckMake || null,\r",
							"                                        \"Truck Model\": truckModel || null,\r",
							"                                        \"Type\": truckType || null,\r",
							"                                        \"Truck Status\": truckStatus || null,\r",
							"                                        \"GPS ID\": zonarGPSID || null,\r",
							"                                        \"Non Zonar?\": truckNonZonar || null,\r",
							"                                        \"Weekly Mileage\": distance_traveled_7_days || null,\r",
							"                                        \"Week Date\": formattedDate\r",
							"                                    }\r",
							"                                };\r",
							"\r",
							"                                // Add the analytics data to the queue\r",
							"                                analyticsDataQueue.push(analyticsUpdateData);\r",
							"                            }\r",
							"                        }\r",
							"                    } catch (error) {\r",
							"                        console.error(\"Error fetching Zonar data or parsing XML: \", error);\r",
							"                    }\r",
							"\r",
							"                    // Increment to next week\r",
							"                    if (count === weeksDiff - 1) {\r",
							"                        endingSaturday = new Date(endDate);\r",
							"                    } else {\r",
							"                        endingSaturday.setDate(endingSaturday.getDate() + 7);\r",
							"                    }\r",
							"                    startDate.setDate(startDate.getDate() + 7);\r",
							"                    count++;\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"\r",
							"        if (truckQryResp.info.more_records && totalProcessedRecords < recordLimit) {\r",
							"            // More records to fetch, increment offset and fetch next page\r",
							"            offset += perPage;\r",
							"            await fetchTruckData(); // Fetch next page\r",
							"        } else {\r",
							"            console.log(\"All records fetched or limit reached.\");\r",
							"\r",
							"            // Start processing the analytics updates with a controlled rate\r",
							"            processAnalyticsUpdateQueue(analyticsDataQueue);\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"// Start fetching truck data\r",
							"fetchTruckData();\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Function to refresh Zoho token\r",
							"function refreshZohoToken() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `https://accounts.zoho.com/oauth/v2/token?client_id=${pm.environment.get(\"prod_zoho_client_id\")}&client_secret=${pm.environment.get(\"prod_zoho_client_secret\")}&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL,ZohoCRM.coql.READ,ZohoAnalytics.data.create&soid=${pm.environment.get(\"prod_zoho_soid\")}`,\r",
							"            method: 'POST'\r",
							"        }, (err, response) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                const jsonData = response.json();\r",
							"                if (jsonData.access_token) {\r",
							"                    pm.environment.set('zoho_access_token', jsonData.access_token);\r",
							"                    pm.environment.set('last_token_refresh_time', Date.now());\r",
							"                    resolve(jsonData.access_token);\r",
							"                } else {\r",
							"                    reject(new Error('Failed to refresh access token'));\r",
							"                }\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// Check if token needs to be refreshed\r",
							"const tokenRefreshInterval = 3300000; // 55 minutes in milliseconds\r",
							"const lastTokenRefreshTime = pm.environment.get('last_token_refresh_time') || 0;\r",
							"\r",
							"if ((Date.now() - lastTokenRefreshTime) > tokenRefreshInterval) {\r",
							"    refreshZohoToken()\r",
							"        .then(token => {\r",
							"            console.log('Token refreshed successfully');\r",
							"            pm.variables.set('zoho_access_token', token);\r",
							"        })\r",
							"        .catch(err => {\r",
							"            console.error('Token refresh failed', err);\r",
							"        });\r",
							"} else {\r",
							"    console.log('Token is still valid');\r",
							"}\r",
							"\r",
							"\r",
							"var requestGetMSToken = {\r",
							"    url: `https://login.microsoftonline.com/${pm.environment.get(\"microsoft_tenant_id\")}/oauth2/v2.0/token`,\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: [\r",
							"            { key: 'grant_type', value: 'client_credentials' },\r",
							"            { key: 'client_id', value: pm.environment.get(\"prod_microsoft_client_id\") },\r",
							"            { key: 'client_secret', value: pm.environment.get(\"prod_microsoft_client_secret\") },\r",
							"            { key: 'scope', value: 'https://graph.microsoft.com/.default openid offline_access' }\r",
							"        ]\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetMSToken, function (err, tokenMSResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response: ', tokenMSResponse.json());\r",
							"    var parsedToken = tokenMSResponse.json();\r",
							"    // console.log(\"ms access token: \",parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"microsoft_access_token\",accessToken);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://postman-echo.com/post",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}