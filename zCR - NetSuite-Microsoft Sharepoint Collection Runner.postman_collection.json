{
	"info": {
		"_postman_id": "42718912-74d5-4450-8880-bbc895c104ba",
		"name": "zCR - NetSuite/Microsoft Sharepoint Collection Runner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28539332",
		"_collection_link": "https://team-rel.postman.co/workspace/Team-REL~69846068-eace-44a2-859b-d7fdf1b963c6/collection/28539332-42718912-74d5-4450-8880-bbc895c104ba?action=share&source=collection_link&creator=28539332"
	},
	"item": [
		{
			"name": "GET Prior Month Escrow - Collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the delay between each request (in milliseconds)\r",
							"var delayBetweenRequests = 1000; // 1 second delay\r",
							"\r",
							"// Get the Microsoft site ID from environment variables\r",
							"var siteId = pm.environment.get(\"microsoft_test_site_id\");\r",
							"var msAccessToken = pm.variables.get(\"microsoft_access_token\");\r",
							"var prodSiteId = pm.environment.get(\"microsoft_prod_site_id\");\r",
							"var acctFolderId = pm.environment.get(\"microsoft_prod_accounts_id\");\r",
							"\r",
							"// Get Zoho CRM credentials from environment variables\r",
							"var zohoAccessToken = pm.environment.get(\"zoho_access_token\");\r",
							"var zohoTrucksEndPoint = pm.environment.get(\"zoho_trucks_endpoint\");\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var results = jsonData.results.slice(0, 50); // Process only the first 50 records\r",
							"var parsedFolderID = \"\";\r",
							"var webUrl = \"\";\r",
							"var parsedWebUrl = \"\";\r",
							"var previousTruckVIN = \"\";\r",
							"var csvFileRow = [];\r",
							"var folderName = \"\";\r",
							"\r",
							"if (results) {\r",
							"\r",
							"    function sendRequestWithDelay(index) {\r",
							"        if (index < results.length) {\r",
							"            let result_obj = results[index];\r",
							"            let values = result_obj.values;\r",
							"            let currentTruckVIN = values['custcol1'] || \"\";\r",
							"\r",
							"            if (currentTruckVIN.length === 17) {\r",
							"\r",
							"                if (currentTruckVIN !== null) {\r",
							"                    processAccountFolder(currentTruckVIN, function(accountName) {\r",
							"                        console.log(\"Account Name: \" + accountName);\r",
							"\r",
							"                        let tranDate = values['trandate'] || \"\";\r",
							"                        let postingPeriod = (values['postingperiod'] && values['postingperiod'][0] && values['postingperiod'][0]['text']) ? values['postingperiod'][0]['text'] : \"\";\r",
							"                        let memo = values['memo'] || \"\";\r",
							"                        let amount = values['amount'] || \"\";\r",
							"                        let type = (values['type'] && values['type'][0] && values['type'][0]['text']) ? values['type'][0]['text'] : \"\";\r",
							"                        let name = (values['entity'] && values['entity'][0] && values['entity'][0]['text']) ? values['entity'][0]['text'] : \"\";\r",
							"\r",
							"                        let parts = postingPeriod.split(\" \");\r",
							"                        let month = parts[0];\r",
							"                        let year = parts[1];\r",
							"                        folderName = `${year}/${month}`;\r",
							"\r",
							"                        if (currentTruckVIN !== previousTruckVIN && previousTruckVIN !== \"\") {\r",
							"                            // Create and upload CSV file for the previous truck VIN\r",
							"                            if (csvFileRow.length > 0 && parsedFolderID !== \"\") {\r",
							"                                handleCSVUpload(previousTruckVIN, folderName, csvFileRow, function () {\r",
							"                                    // Clear the CSV row data after uploading\r",
							"                                    csvFileRow = [];\r",
							"                                    // Proceed to process the current truck VIN\r",
							"                                    processCurrentTruckVIN(currentTruckVIN, accountName, tranDate, postingPeriod, memo, amount, type, name, index);\r",
							"                                });\r",
							"                            } else {\r",
							"                                csvFileRow = [];\r",
							"                                // Proceed to process the current truck VIN if there's no data for the previous one\r",
							"                                processCurrentTruckVIN(currentTruckVIN, accountName, tranDate, postingPeriod, memo, amount, type, name, index);\r",
							"                            }\r",
							"                        } else {\r",
							"                            // Proceed to process the current truck VIN without creating a CSV file\r",
							"                            processCurrentTruckVIN(currentTruckVIN, accountName, tranDate, postingPeriod, memo, amount, type, name, index);\r",
							"                        }\r",
							"\r",
							"                        // Update previous truck VIN\r",
							"                        previousTruckVIN = currentTruckVIN;\r",
							"                    });\r",
							"                }\r",
							"            } else {\r",
							"                console.log(\"Invalid VIN length for VIN \" + currentTruckVIN);\r",
							"                sendRequestWithDelay(index + 1); // Skip to the next record\r",
							"            }\r",
							"        } else {\r",
							"            // Process the last batch if EOF or count limit reached\r",
							"            if (csvFileRow.length > 0 && parsedFolderID !== \"\") {\r",
							"                handleCSVUpload(previousTruckVIN, folderName, csvFileRow, function () {\r",
							"                    console.log(\"Last batch processed\");\r",
							"                });\r",
							"            } else {\r",
							"                console.log(\"EOF reached or count limit reached\");\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    function processCurrentTruckVIN(currentTruckVIN, accountName, tranDate, postingPeriod, memo, amount, type, name, index) {\r",
							"        var requestQueryAcctFolder = {\r",
							"            url: `https://graph.microsoft.com/v1.0/Drives/${prodSiteId}/root:/${acctFolderId}:/search(q='${accountName}')`,\r",
							"            method: 'GET',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json',\r",
							"                \"Authorization\": \"Bearer \" + msAccessToken\r",
							"            }\r",
							"        };\r",
							"\r",
							"        pm.sendRequest(requestQueryAcctFolder, function (err, acctFolderResponse) {\r",
							"            if (err) {\r",
							"                console.error('Error:', err);\r",
							"                return;\r",
							"            }\r",
							"\r",
							"            if (acctFolderResponse.code === 204) {\r",
							"                console.log('204 No Folder Received');\r",
							"            } else if (acctFolderResponse.code === 401) {\r",
							"                console.log(\"Invalid response: \" + acctFolderResponse.json().message);\r",
							"            } else if (acctFolderResponse.code === 200 || acctFolderResponse.code === 201 || acctFolderResponse.code === 404) {\r",
							"                var parsedVINFolder = acctFolderResponse.json();\r",
							"                var value = parsedVINFolder.value;\r",
							"\r",
							"                if (Array.isArray(value)) {\r",
							"                    value.forEach((item) => {\r",
							"                        if (item.folder !== null && item.name === accountName) {\r",
							"                            parsedFolderID = item.id;\r",
							"                            webUrl = item.webUrl;\r",
							"                            console.log(\"webUrl: \" + webUrl);\r",
							"                            parsedWebUrl = webUrl.split(\"Accounts\")[1] + \"/\" + accountName + \"/portal%20docs/Escrow\";\r",
							"                        }\r",
							"                    });\r",
							"                }\r",
							"\r",
							"                // VIN folder does exist on production so we check if the portaldocs location exists\r",
							"                if (parsedFolderID !== \"\") {\r",
							"                    var requestFindFolder = {\r",
							"                        url: `https://graph.microsoft.com/v1.0/Drives/${prodSiteId}/root:/${acctFolderId}${parsedWebUrl}/${folderName}`,\r",
							"                        method: 'GET',\r",
							"                        header: {\r",
							"                            \"Authorization\": \"Bearer \" + msAccessToken,\r",
							"                            'Content-Type': 'application/json'\r",
							"                        }\r",
							"                    };\r",
							"\r",
							"                    setTimeout(() => {\r",
							"                        pm.sendRequest(requestFindFolder, function (err, findFolderResponse) {\r",
							"                            if (err) {\r",
							"                                console.error('Error:', err);\r",
							"                                return;\r",
							"                            }\r",
							"\r",
							"                            if (findFolderResponse.code === 204) {\r",
							"                                console.log('204 No Folder Received');\r",
							"                            } else if (findFolderResponse.code === 401) {\r",
							"                                console.log(\"Invalid response: \" + findFolderResponse.json().message);\r",
							"                            } else if (findFolderResponse.code === 200 || findFolderResponse.code === 404) {\r",
							"                                var parsedFolder = findFolderResponse.json();\r",
							"                                var folderID = parsedFolder.id;\r",
							"                                if (folderID === null) {\r",
							"                                    createFolder(folderName, function () {\r",
							"                                        handleCSVCreation(currentTruckVIN, folderName, csvFileRow, function () {\r",
							"                                            sendRequestWithDelay(index + 1);\r",
							"                                        });\r",
							"                                    });\r",
							"                                } else {\r",
							"                                    handleCSVCreation(currentTruckVIN, folderName, csvFileRow, function () {\r",
							"                                        sendRequestWithDelay(index + 1);\r",
							"                                    });\r",
							"                                }\r",
							"                            }\r",
							"                        });\r",
							"                    }, delayBetweenRequests);\r",
							"                } else {\r",
							"                    // Skip CSV creation if folder ID is not found\r",
							"                    console.log(`Folder ID for ${currentTruckVIN} not found: Skipping CSV creation.`);\r",
							"                    setTimeout(() => {\r",
							"                        sendRequestWithDelay(index + 1);\r",
							"                    }, delayBetweenRequests);\r",
							"                }\r",
							"            }\r",
							"        });\r",
							"\r",
							"        let csvStrRow = `${currentTruckVIN},${tranDate},${postingPeriod},${memo},${amount},${type},${name}`;\r",
							"\r",
							"        console.log(\"csvStrRow \" + csvStrRow);\r",
							"\r",
							"        csvFileRow.push(csvStrRow);\r",
							"        previousTruckVIN = currentTruckVIN;\r",
							"    }\r",
							"\r",
							"    function handleCSVUpload(previousTruckVIN, folderName, csvFileRow, callback) {\r",
							"        console.log(`Uploading CSV for VIN: ${previousTruckVIN}, Folder: ${folderName}`);\r",
							"\r",
							"        let csvFileStr = [];\r",
							"        csvFileStr.push(\"VIN,Date,Period,Memo,Amount,Type,Name\"); // Add the header\r",
							"\r",
							"        console.log(\"csvFileRow: \" + csvFileRow);\r",
							"\r",
							"        csvFileRow.forEach(line => csvFileStr.push(line));\r",
							"        let csvFileName = `${previousTruckVIN}_escrow_details.csv`;\r",
							"        var csvContent = csvFileStr.join('\\n');\r",
							"        var requestPutCSV = {\r",
							"            url: `https://graph.microsoft.com/v1.0/Drives/${prodSiteId}/items/${acctFolderId}:${parsedWebUrl}/${folderName}/${csvFileName}:/content`,\r",
							"            method: 'PUT',\r",
							"            header: {\r",
							"                \"Authorization\": \"Bearer \" + msAccessToken,\r",
							"                'Content-Type': 'text/csv'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: csvContent\r",
							"            }\r",
							"        };\r",
							"\r",
							"        console.log(`CSV Content: \\n${csvContent}`);\r",
							"\r",
							"        setTimeout(() => {\r",
							"            pm.sendRequest(requestPutCSV, function (err, putCSVResponse) {\r",
							"                if (putCSVResponse) {\r",
							"                    console.log('put CSV response: ', putCSVResponse.json());\r",
							"                }\r",
							"                callback();\r",
							"            });\r",
							"        }, delayBetweenRequests);\r",
							"    }\r",
							"\r",
							"    function handleCSVCreation(previousTruckVIN, folderName, csvFileRow, callback) {\r",
							"        if (csvFileRow.length > 0 && parsedFolderID !== \"\") {\r",
							"            handleCSVUpload(previousTruckVIN, folderName, csvFileRow, callback);\r",
							"        } else {\r",
							"            console.log(\"No CSV file to create.\");\r",
							"            callback();\r",
							"        }\r",
							"    }\r",
							"\r",
							"    function createFolder(folderName, callback) {\r",
							"        var requestCreateFolder = {\r",
							"            url: `https://graph.microsoft.com/v1.0/Drives/${siteId}/root:/${pm.environment.get(\"microsoft_prod_accounts_id\")}:/children`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                \"Authorization\": \"Bearer \" + msAccessToken,\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    \"name\": folderName,\r",
							"                    \"folder\": {},\r",
							"                    \"@microsoft.graph.conflictBehavior\": \"rename\"\r",
							"                })\r",
							"            }\r",
							"        };\r",
							"\r",
							"        setTimeout(() => {\r",
							"            pm.sendRequest(requestCreateFolder, function (err, putFolderResponse) {\r",
							"                if (err) {\r",
							"                    console.error('Error:', err);\r",
							"                    return;\r",
							"                }\r",
							"                if (putFolderResponse.code === 204) {\r",
							"                    console.log('204 No Folder Received');\r",
							"                } else if (putFolderResponse.code === 401) {\r",
							"                    console.log(\"Invalid response: \" + putFolderResponse.json().message);\r",
							"                } else if (putFolderResponse.code === 200) {\r",
							"                    var parsedNewFolder = putFolderResponse.json();\r",
							"                    var newFolderData = parsedNewFolder.data;\r",
							"                    var folderID = newFolderData[0].id;\r",
							"                    callback();\r",
							"                }\r",
							"            });\r",
							"        }, delayBetweenRequests);\r",
							"    }\r",
							"\r",
							"    function processAccountFolder(currentTruckVIN, callback) {\r",
							"        var requestZohoTruck = {\r",
							"            url: `${zohoTrucksEndPoint}search?criteria=(Name:equals:${currentTruckVIN})`,\r",
							"            method: 'GET',\r",
							"            header: {\r",
							"                \"Authorization\": \"Zoho-oauthtoken \" + zohoAccessToken,\r",
							"                'Content-Type': 'application/json'\r",
							"            }\r",
							"        };\r",
							"\r",
							"        pm.sendRequest(requestZohoTruck, function (err, zohoResponse) {\r",
							"            if (err) {\r",
							"                console.error('Error:', err);\r",
							"                callback(null);\r",
							"                return;\r",
							"            }\r",
							"\r",
							"            if (zohoResponse.code === 200) {\r",
							"                var zohoData = zohoResponse.json();\r",
							"                var accountName = zohoData.data[0]?.Account_Name || \"Unknown Account\";\r",
							"                callback(accountName);\r",
							"            } else {\r",
							"                console.log(\"Zoho CRM API error: \" + zohoResponse.json().message);\r",
							"                callback(null);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"\r",
							"    // Start sending requests\r",
							"    sendRequestWithDelay(0);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cyptojs = require('crypto-js');\r",
							"\r",
							"let tokenClientIDStr = 'prod_ns_token_client_id';\r",
							"let tokenClientSecretStr = 'prod_ns_token_client_secret';\r",
							"let tokenIDStr = 'PROD_NS_TOKEN_ID';\r",
							"let tokenSecretStr = 'PROD_NS_TOKEN_SECRET';\r",
							"let acctIDStr = 'PROD_NS_ACCOUNT_ID';\r",
							"let ns_acct_url_id = \"7936739\";\r",
							"let custom_search_script_id = \"1001\";\r",
							"let custom_search_col_script_id = \"1002\";\r",
							"\r",
							"pm.environment.set(\"ns_acct_url_id\", ns_acct_url_id);\r",
							"pm.environment.set(\"custom_search_script_id\", custom_search_script_id);\r",
							"pm.environment.set(\"custom_search_col_script_id\", custom_search_col_script_id);\r",
							"\r",
							"const oauth_consumer_key = pm.environment.get(tokenClientIDStr);  \r",
							"const oauth_consumer_secret = pm.environment.get(tokenClientSecretStr);\r",
							"const oauth_token_id = pm.environment.get(tokenIDStr);\r",
							"const oauth_token_secret = pm.environment.get(tokenSecretStr);\r",
							"const oauth_account_id = pm.environment.get(acctIDStr); \r",
							"\r",
							"const oauth_signing_key = `${encodeURIComponent(oauth_consumer_secret)}&${encodeURIComponent(oauth_token_secret)}`;\r",
							"\r",
							"const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"let oauth_nonce = '';\r",
							"for (var i = 0; i < 32; i++) {\r",
							"    oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));\r",
							"}\r",
							"const oauth_nonce_array = cyptojs.enc.Utf8.parse(oauth_nonce);\r",
							"const oauth_nonce_final = encodeURIComponent(cyptojs.enc.Base64.stringify(oauth_nonce_array));\r",
							"\r",
							"const oauth_parameter_string_object = {};\r",
							"\r",
							"oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;\r",
							"oauth_parameter_string_object.oauth_token = oauth_token_id;\r",
							"\r",
							"oauth_parameter_string_object.oauth_nonce = oauth_nonce_final;\r",
							"\r",
							"oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);\r",
							"\r",
							"oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA256';\r",
							"\r",
							"oauth_parameter_string_object.oauth_version = '1.0';\r",
							"\r",
							"const oauth_authorization_header_object = {};\r",
							"for (var key in oauth_parameter_string_object) {\r",
							"    oauth_authorization_header_object[key] = oauth_parameter_string_object[key];\r",
							"}\r",
							"\r",
							"oauth_authorization_header_object.realm = oauth_account_id;\r",
							"\r",
							"const url_query_string = pm.request.url.getQueryString({  // Postman method to get query string\r",
							"    ignoreDisabled: true\r",
							"});\r",
							"\r",
							"let url_query_string_array = [];\r",
							"\r",
							"if (url_query_string != \"\"){\r",
							"    url_query_string_array = url_query_string.split('&');\r",
							"}\r",
							"\r",
							"let url_query_string_object = {};\r",
							"if (url_query_string !== \"\") {\r",
							"    url_query_string_object = JSON.parse(`{\"${url_query_string.replace(/&/g, '\",\"').replace(/=/g,'\":\"')}\"}`, function(key, value) {return key === \"\" ? value : encodeURIComponent(value)});\r",
							"}\r",
							"\r",
							"// parse request.params\r",
							"for (var key in url_query_string_object) {;\r",
							"    if(url_query_string_object[key] == \"%7B%7Bcustom_search_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_script_id;\r",
							"    } else if (url_query_string_object[key] == \"%7B%7Bcustom_search_col_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_col_script_id;\r",
							"    }\r",
							"    oauth_parameter_string_object[key] = url_query_string_object[key];\r",
							"    \r",
							"}\r",
							"\r",
							"// sort object by key\r",
							"const oauth_parameter_string_object_ordered = {};\r",
							"Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {\r",
							"    oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];\r",
							"});\r",
							"\r",
							"// convert object into array\r",
							"const oauth_parameter_string_array = [];\r",
							"for (var key in oauth_parameter_string_object_ordered) {\r",
							"    oauth_parameter_string_array.push(`${key}=${oauth_parameter_string_object_ordered[key]}`);\r",
							"}\r",
							"\r",
							"// generate parameter string\r",
							"const oauth_parameter_string = oauth_parameter_string_array.join('&');\r",
							"\r",
							"let base_host = pm.request.url.getOAuth1BaseUrl();\r",
							"let regexp = /{{(.*?)}}/g;\r",
							"while (result = regexp.exec(base_host)) {\r",
							"    let value = pm.environment.get(result[1]);\r",
							"    base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);\r",
							"}\r",
							"\r",
							"const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;\r",
							"let oauth_signature = cyptojs.HmacSHA256(oauth_base_string, oauth_signing_key).toString(cyptojs.enc.Base64);\r",
							"oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);\r",
							"\r",
							"// convert object into array (for Authorization header string)\r",
							"const oauth_authorization_header_array = [];\r",
							"for (var key in oauth_authorization_header_object) {\r",
							"    oauth_authorization_header_array.push(`${key}=\"${oauth_authorization_header_object[key]}\"`);\r",
							"}\r",
							"\r",
							"const oauth_authorization_header = oauth_authorization_header_array.join(', ');\r",
							"\r",
							"// generate Authorization header, FINALLY!\r",
							"pm.request.headers.add({\r",
							"    key: 'Authorization',\r",
							"    value: 'OAuth ' + oauth_authorization_header\r",
							"});\r",
							"\r",
							"// Escape URI parameters using encodeURIComponent => RFC3986\r",
							"// This is encoding the query string params in the request.\r",
							"if (url_query_string_array.length !== 0) {\r",
							"    let request_parameter_array = [];\r",
							"    for (var key in url_query_string_object) {\r",
							"        request_parameter_array.push(key + '=' + url_query_string_object[key]);\r",
							"    }\r",
							"    const request_parameter_string = request_parameter_array.join('&');\r",
							"\r",
							"    pm.request.url = pm.request.url.getOAuth1BaseUrl() + \"?\" + request_parameter_string;\r",
							"}\r",
							"\r",
							"var requestGetMSToken = {\r",
							"    url: `https://login.microsoftonline.com/${pm.environment.get(\"microsoft_tenant_id\")}/oauth2/v2.0/token`,\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: [\r",
							"            { key: 'grant_type', value: 'client_credentials' },\r",
							"            { key: 'client_id', value: pm.environment.get(\"prod_microsoft_client_id\") },\r",
							"            { key: 'client_secret', value: pm.environment.get(\"prod_microsoft_client_secret\") },\r",
							"            { key: 'scope', value: 'https://graph.microsoft.com/.default openid offline_access' }\r",
							"        ]\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetMSToken, function (err, tokenMSResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response: ', tokenMSResponse.json());\r",
							"    var parsedToken = tokenMSResponse.json();\r",
							"    // console.log(\"ms access token: \",parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"microsoft_access_token\",accessToken);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"searchID\": \"customsearch1188\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
					"protocol": "https",
					"host": [
						"7936739",
						"restlets",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"app",
						"site",
						"hosting",
						"restlet.nl"
					],
					"query": [
						{
							"key": "script",
							"value": "1001"
						},
						{
							"key": "deploy",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Prior Month Escrow - Collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cyptojs = require('crypto-js');\r",
							"\r",
							"let tokenClientIDStr = 'prod_ns_token_client_id';\r",
							"let tokenClientSecretStr = 'prod_ns_token_client_secret';\r",
							"let tokenIDStr = 'PROD_NS_TOKEN_ID';\r",
							"let tokenSecretStr = 'PROD_NS_TOKEN_SECRET';\r",
							"let acctIDStr = 'PROD_NS_ACCOUNT_ID';\r",
							"let ns_acct_url_id = \"7936739\";\r",
							"let custom_search_script_id = \"1001\";\r",
							"let custom_search_col_script_id = \"1002\";\r",
							"\r",
							"pm.environment.set(\"ns_acct_url_id\", ns_acct_url_id);\r",
							"pm.environment.set(\"custom_search_script_id\", custom_search_script_id);\r",
							"pm.environment.set(\"custom_search_col_script_id\", custom_search_col_script_id);\r",
							"\r",
							"const oauth_consumer_key = pm.environment.get(tokenClientIDStr);  \r",
							"const oauth_consumer_secret = pm.environment.get(tokenClientSecretStr);\r",
							"const oauth_token_id = pm.environment.get(tokenIDStr);\r",
							"const oauth_token_secret = pm.environment.get(tokenSecretStr);\r",
							"const oauth_account_id = pm.environment.get(acctIDStr); \r",
							"\r",
							"const oauth_signing_key = `${encodeURIComponent(oauth_consumer_secret)}&${encodeURIComponent(oauth_token_secret)}`;\r",
							"\r",
							"const random_source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"let oauth_nonce = '';\r",
							"for (var i = 0; i < 32; i++) {\r",
							"    oauth_nonce += random_source.charAt(Math.floor(Math.random() * random_source.length));\r",
							"}\r",
							"const oauth_nonce_array = cyptojs.enc.Utf8.parse(oauth_nonce);\r",
							"const oauth_nonce_final = encodeURIComponent(cyptojs.enc.Base64.stringify(oauth_nonce_array));\r",
							"\r",
							"const oauth_parameter_string_object = {};\r",
							"\r",
							"oauth_parameter_string_object.oauth_consumer_key = oauth_consumer_key;\r",
							"oauth_parameter_string_object.oauth_token = oauth_token_id;\r",
							"\r",
							"oauth_parameter_string_object.oauth_nonce = oauth_nonce_final;\r",
							"\r",
							"oauth_parameter_string_object.oauth_timestamp = Math.round((new Date()).getTime() / 1000);\r",
							"\r",
							"oauth_parameter_string_object.oauth_signature_method = 'HMAC-SHA256';\r",
							"\r",
							"oauth_parameter_string_object.oauth_version = '1.0';\r",
							"\r",
							"const oauth_authorization_header_object = {};\r",
							"for (var key in oauth_parameter_string_object) {\r",
							"    oauth_authorization_header_object[key] = oauth_parameter_string_object[key];\r",
							"}\r",
							"\r",
							"oauth_authorization_header_object.realm = oauth_account_id;\r",
							"\r",
							"const url_query_string = pm.request.url.getQueryString({  // Postman method to get query string\r",
							"    ignoreDisabled: true\r",
							"});\r",
							"\r",
							"let url_query_string_array = [];\r",
							"\r",
							"if (url_query_string != \"\"){\r",
							"    url_query_string_array = url_query_string.split('&');\r",
							"}\r",
							"\r",
							"let url_query_string_object = {};\r",
							"if (url_query_string !== \"\") {\r",
							"    url_query_string_object = JSON.parse(`{\"${url_query_string.replace(/&/g, '\",\"').replace(/=/g,'\":\"')}\"}`, function(key, value) {return key === \"\" ? value : encodeURIComponent(value)});\r",
							"}\r",
							"\r",
							"// parse request.params\r",
							"for (var key in url_query_string_object) {;\r",
							"    if(url_query_string_object[key] == \"%7B%7Bcustom_search_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_script_id;\r",
							"    } else if (url_query_string_object[key] == \"%7B%7Bcustom_search_col_script_id%7D%7D\") {\r",
							"        url_query_string_object[key] = custom_search_col_script_id;\r",
							"    }\r",
							"    oauth_parameter_string_object[key] = url_query_string_object[key];\r",
							"    \r",
							"}\r",
							"\r",
							"// sort object by key\r",
							"const oauth_parameter_string_object_ordered = {};\r",
							"Object.keys(oauth_parameter_string_object).sort().forEach(function(key) {\r",
							"    oauth_parameter_string_object_ordered[key] = oauth_parameter_string_object[key];\r",
							"});\r",
							"\r",
							"// convert object into array\r",
							"const oauth_parameter_string_array = [];\r",
							"for (var key in oauth_parameter_string_object_ordered) {\r",
							"    oauth_parameter_string_array.push(`${key}=${oauth_parameter_string_object_ordered[key]}`);\r",
							"}\r",
							"\r",
							"// generate parameter string\r",
							"const oauth_parameter_string = oauth_parameter_string_array.join('&');\r",
							"\r",
							"let base_host = pm.request.url.getOAuth1BaseUrl();\r",
							"let regexp = /{{(.*?)}}/g;\r",
							"while (result = regexp.exec(base_host)) {\r",
							"    let value = pm.environment.get(result[1]);\r",
							"    base_host = base_host.replace(new RegExp(`{{${result[1]}}}`, 'g'), value);\r",
							"}\r",
							"\r",
							"const oauth_base_string = `${pm.request.method}&${encodeURIComponent(base_host)}&${encodeURIComponent(oauth_parameter_string)}`;\r",
							"let oauth_signature = cyptojs.HmacSHA256(oauth_base_string, oauth_signing_key).toString(cyptojs.enc.Base64);\r",
							"oauth_authorization_header_object.oauth_signature = encodeURIComponent(oauth_signature);\r",
							"\r",
							"// convert object into array (for Authorization header string)\r",
							"const oauth_authorization_header_array = [];\r",
							"for (var key in oauth_authorization_header_object) {\r",
							"    oauth_authorization_header_array.push(`${key}=\"${oauth_authorization_header_object[key]}\"`);\r",
							"}\r",
							"\r",
							"const oauth_authorization_header = oauth_authorization_header_array.join(', ');\r",
							"\r",
							"// generate Authorization header, FINALLY!\r",
							"pm.request.headers.add({\r",
							"    key: 'Authorization',\r",
							"    value: 'OAuth ' + oauth_authorization_header\r",
							"});\r",
							"\r",
							"// Escape URI parameters using encodeURIComponent => RFC3986\r",
							"// This is encoding the query string params in the request.\r",
							"if (url_query_string_array.length !== 0) {\r",
							"    let request_parameter_array = [];\r",
							"    for (var key in url_query_string_object) {\r",
							"        request_parameter_array.push(key + '=' + url_query_string_object[key]);\r",
							"    }\r",
							"    const request_parameter_string = request_parameter_array.join('&');\r",
							"\r",
							"    pm.request.url = pm.request.url.getOAuth1BaseUrl() + \"?\" + request_parameter_string;\r",
							"}\r",
							"\r",
							"// var requestGetToken = {\r",
							"//     url: 'https://accounts.zoho.com/oauth/v2/token?client_id=' + pm.environment.get(\"prod_zoho_client_id\") + '&client_secret=' + pm.environment.get(\"prod_zoho_client_secret\") + '&grant_type=client_credentials&scope=ZohoCRM.modules.ALL,ZohoCRM.settings.ALL&soid=ZohoCRM.747501552',\r",
							"//     method: 'POST',\r",
							"//     header: {\r",
							"//         'Content-Type': 'application/x-www-form-urlencoded'\r",
							"//     }\r",
							"// };\r",
							"\r",
							"// pm.sendRequest(requestGetToken, function (err, tokenResponse) {\r",
							"//     if (err) {\r",
							"//         console.error('Error:', err);\r",
							"//         return;\r",
							"//     }\r",
							"//     console.log('Response:', tokenResponse.json());\r",
							"//     var parsedToken = tokenResponse.json();\r",
							"//     console.log(parsedToken);\r",
							"//     var accessToken = parsedToken.access_token;\r",
							"//     pm.variables.set(\"zoho_access_token\",accessToken);\r",
							"// });\r",
							"\r",
							"var requestGetMSToken = {\r",
							"    url: `https://login.microsoftonline.com/${pm.environment.get(\"microsoft_tenant_id\")}/oauth2/v2.0/token`,\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: [\r",
							"            { key: 'grant_type', value: 'client_credentials' },\r",
							"            { key: 'client_id', value: pm.environment.get(\"prod_microsoft_client_id\") },\r",
							"            { key: 'client_secret', value: pm.environment.get(\"prod_microsoft_client_secret\") },\r",
							"            { key: 'scope', value: 'https://graph.microsoft.com/.default openid offline_access' }\r",
							"        ]\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(requestGetMSToken, function (err, tokenMSResponse) {\r",
							"    if (err) {\r",
							"        console.error('Error:', err);\r",
							"        return;\r",
							"    }\r",
							"    console.log('Response: ', tokenMSResponse.json());\r",
							"    var parsedToken = tokenMSResponse.json();\r",
							"    // console.log(\"ms access token: \",parsedToken);\r",
							"    var accessToken = parsedToken.access_token;\r",
							"    pm.variables.set(\"microsoft_access_token\",accessToken);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the delay between each request (in milliseconds)\r",
							"var delayBetweenRequests = 1000; // 1 second delay\r",
							"\r",
							"// Get the Microsoft site ID from environment variables\r",
							"var siteId = pm.environment.get(\"microsoft_test_site_id\");\r",
							"var msAccessToken = pm.variables.get(\"microsoft_access_token\");\r",
							"var prodSiteId = pm.environment.get(\"microsoft_prod_site_id\");\r",
							"var fedExFolderId = pm.environment.get(\"microsoft_prod_fedex_folder_id\");\r",
							"\r",
							"// Test FedEx folder ID\r",
							"var parentId = '01CCBEUGXLUZ73M5U7IFEJ5XYGX4DMTVAE';\r",
							"var jsonData = pm.response.json();\r",
							"var results = jsonData.results;\r",
							"var parsedFolderID = \"\";\r",
							"var webUrl = \"\";\r",
							"var parsedWebUrl = \"\";\r",
							"\r",
							"if (results) {\r",
							"    let count = 1;\r",
							"    let previousTruckVIN = \"\";\r",
							"    let folderName = \"\";\r",
							"\r",
							"    function sendRequestWithDelay(index) {\r",
							"        if (index < results.length) {\r",
							"        // if (index < results.length && count <= 200) {\r",
							"            let result_obj = results[index];\r",
							"            let values = result_obj.values;\r",
							"            let currentTruckVIN = values['custcol1'] || \"\";\r",
							"\r",
							"            if (currentTruckVIN !== null) {\r",
							"                let postingPeriod = (values['postingperiod'] && values['postingperiod'][0] && values['postingperiod'][0]['text']) ? values['postingperiod'][0]['text'] : \"\";\r",
							"                let parts = postingPeriod.split(\" \");\r",
							"                let month = parts[0];\r",
							"                let year = parts[1];\r",
							"                folderName = `${year}/${month}`;\r",
							"\r",
							"                var requestQueryTruckFolder = {\r",
							"                    url: `https://graph.microsoft.com/v1.0/Drives/${prodSiteId}/root:/FedEx:/search(q='{${currentTruckVIN}}')`,\r",
							"                    method: 'GET',\r",
							"                    header: {\r",
							"                        'Content-Type': 'application/json',\r",
							"                        \"Authorization\": \"Bearer \" + msAccessToken\r",
							"                    }\r",
							"                };\r",
							"\r",
							"                pm.sendRequest(requestQueryTruckFolder, function (err, truckFolderResponse) {\r",
							"                    if (err) {\r",
							"                        console.error('Error:', err);\r",
							"                        return;\r",
							"                    }\r",
							"\r",
							"                    if (truckFolderResponse.code === 204) {\r",
							"                        console.log('204 No Folder Received');\r",
							"                    } else if (truckFolderResponse.code === 401) {\r",
							"                        console.log(\"Invalid response: \" + truckFolderResponse.json().message);\r",
							"                    } else if (truckFolderResponse.code === 200 || truckFolderResponse.code === 201) {\r",
							"                        var parsedVINFolder = truckFolderResponse.json();\r",
							"                        var value = parsedVINFolder.value;\r",
							"\r",
							"                        if (Array.isArray(value)) {\r",
							"                            value.forEach((item, index) => {\r",
							"                                if (item.folder !== null && item.name === currentTruckVIN) {\r",
							"                                    parsedFolderID = item.id;\r",
							"                                    webUrl = item.webUrl;\r",
							"                                    // console.log(\"webUrl: \" + webUrl);\r",
							"                                    parsedWebUrl = webUrl.split(\"FedEx\")[1] + \"/Portal%20Docs/Escrow\";\r",
							"                                    // console.log(\"ending URL: \" + parsedWebUrl);\r",
							"                                }\r",
							"                            });\r",
							"                        }\r",
							"\r",
							"                        // VIN folder does exist on production so we check if the portaldocs location exists\r",
							"                        if (parsedFolderID !== \"\") {\r",
							"                            var requestFindFolder = {\r",
							"                                url: `https://graph.microsoft.com/v1.0/Drives/${prodSiteId}/root:/FedEx${parsedWebUrl}/${folderName}`,\r",
							"                                method: 'GET',\r",
							"                                header: {\r",
							"                                    \"Authorization\": \"Bearer \" + msAccessToken,\r",
							"                                    'Content-Type': 'application/json'\r",
							"                                }\r",
							"                            };\r",
							"\r",
							"                            setTimeout(() => {\r",
							"                                pm.sendRequest(requestFindFolder, function (err, findFolderResponse) {\r",
							"                                    if (err) {\r",
							"                                        console.error('Error:', err);\r",
							"                                        return;\r",
							"                                    }\r",
							"\r",
							"                                    if (findFolderResponse.code === 204) {\r",
							"                                        console.log('204 No Folder Received');\r",
							"                                    } else if (findFolderResponse.code === 401) {\r",
							"                                        console.log(\"Invalid response: \" + findFolderResponse.json().message);\r",
							"                                    } else if (findFolderResponse.code === 200) {\r",
							"                                        var parsedFolder = findFolderResponse.json();\r",
							"                                        var folderID = parsedFolder.id;\r",
							"                                        if (folderID === null) {\r",
							"                                            createFolder(folderName);\r",
							"                                        } else {\r",
							"                                            handleFileDeletion(currentTruckVIN, folderName);\r",
							"                                        }\r",
							"                                    }\r",
							"                                });\r",
							"                            }, delayBetweenRequests);\r",
							"                        } else {\r",
							"                            // Skip deletion if folder ID is not found\r",
							"                            console.log(`Folder ID for ${currentTruckVIN} not found: Skipping file deletion.`);\r",
							"                        }\r",
							"                    }\r",
							"                });\r",
							"\r",
							"                previousTruckVIN = currentTruckVIN;\r",
							"\r",
							"                setTimeout(() => {\r",
							"                    sendRequestWithDelay(index + 1);\r",
							"                }, delayBetweenRequests);\r",
							"            }\r",
							"        } else if (index >= 199) {\r",
							"        // } else if (index >= results.length - 1) {\r",
							"            handleEOF(previousTruckVIN, folderName);\r",
							"        }\r",
							"        count++;\r",
							"    }\r",
							"\r",
							"    function handleFileDeletion(previousTruckVIN, folderName) {\r",
							"        let csvFileName = `${previousTruckVIN}_escrow_details.csv`;\r",
							"        var requestDeleteFile = {\r",
							"            url: `https://graph.microsoft.com/v1.0/Drives/${prodSiteId}/items/${fedExFolderId}:${parsedWebUrl}/${folderName}`,\r",
							"            method: 'DELETE',\r",
							"            header: {\r",
							"                \"Authorization\": \"Bearer \" + msAccessToken,\r",
							"                'Content-Type': 'application/json'\r",
							"            }\r",
							"        };\r",
							"\r",
							"        setTimeout(() => {\r",
							"            pm.sendRequest(requestDeleteFile, function (err, deleteFileResponse) {\r",
							"                if (err) {\r",
							"                    console.error('Error:', err);\r",
							"                    return;\r",
							"                }\r",
							"                if (deleteFileResponse.code === 204) {\r",
							"                    console.log(`File ${csvFileName} deleted successfully`);\r",
							"                } else {\r",
							"                    console.log('Delete file response: ', deleteFileResponse.json());\r",
							"                }\r",
							"            });\r",
							"        }, delayBetweenRequests);\r",
							"    }\r",
							"\r",
							"    function handleCSVCreation(previousTruckVIN, folderName) {\r",
							"        setTimeout(() => {\r",
							"            handleFileDeletion(previousTruckVIN, folderName);\r",
							"        }, delayBetweenRequests);\r",
							"    }\r",
							"\r",
							"    function createFolder(folderName) {\r",
							"        var requestCreateFolder = {\r",
							"            url: `https://graph.microsoft.com/v1.0/Drives/${siteId}/root:/${parentId}:/children`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                \"Authorization\": \"Bearer \" + msAccessToken,\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    \"name\": folderName,\r",
							"                    \"folder\": {},\r",
							"                    \"@microsoft.graph.conflictBehavior\": \"rename\"\r",
							"                })\r",
							"            }\r",
							"        };\r",
							"\r",
							"        setTimeout(() => {\r",
							"            pm.sendRequest(requestCreateFolder, function (err, putFolderResponse) {\r",
							"                if (err) {\r",
							"                    console.error('Error:', err);\r",
							"                    return;\r",
							"                }\r",
							"                if (putFolderResponse.code === 204) {\r",
							"                    console.log('204 No Folder Received');\r",
							"                } else if (putFolderResponse.code === 401) {\r",
							"                    console.log(\"Invalid response: \" + putFolderResponse.json().message);\r",
							"                } else if (putFolderResponse.code === 200) {\r",
							"                    var parsedNewFolder = putFolderResponse.json();\r",
							"                    var newFolderData = parsedNewFolder.data;\r",
							"                    var folderID = newFolderData[0].id;\r",
							"                }\r",
							"            });\r",
							"        }, delayBetweenRequests);\r",
							"    }\r",
							"\r",
							"    function handleEOF(previousTruckVIN, folderName) {\r",
							"        var requestQueryTruckFolder = {\r",
							"            url: `https://graph.microsoft.com/v1.0/Drives/${prodSiteId}/root:/FedEx:/search(q='{${previousTruckVIN}}')`,\r",
							"            method: 'GET',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json',\r",
							"                \"Authorization\": \"Bearer \" + msAccessToken\r",
							"            }\r",
							"        };\r",
							"\r",
							"        pm.sendRequest(requestQueryTruckFolder, function (err, truckFolderResponse) {\r",
							"            if (err) {\r",
							"                console.error('Error:', err);\r",
							"                return;\r",
							"            }\r",
							"\r",
							"            if (truckFolderResponse.code === 204) {\r",
							"                console.log('204 No Folder Received');\r",
							"            } else if (truckFolderResponse.code === 401) {\r",
							"                console.log(\"Invalid response: \" + truckFolderResponse.json().message);\r",
							"            } else if (truckFolderResponse.code === 200 || truckFolderResponse.code === 201) {\r",
							"                var parsedVINFolder = truckFolderResponse.json();\r",
							"                var value = parsedVINFolder.value;\r",
							"\r",
							"                if (Array.isArray(value)) {\r",
							"                    value.forEach((item, index) => {\r",
							"                        if (item.folder !== null && item.name === previousTruckVIN) {\r",
							"                            parsedFolderID = item.id;\r",
							"                            webUrl = item.webUrl;\r",
							"                            // console.log(\"webUrl: \" + webUrl);\r",
							"                            parsedWebUrl = webUrl.split(\"FedEx\")[1] + \"/Portal%20Docs/Escrow\";\r",
							"                            // console.log(\"ending URL: \" + parsedWebUrl);\r",
							"                        }\r",
							"                    });\r",
							"                }\r",
							"\r",
							"                if (parsedFolderID !== \"\") {\r",
							"                    var requestFindFolder = {\r",
							"                        url: `https://graph.microsoft.com/v1.0/Drives/${prodSiteId}/root:/FedEx${parsedWebUrl}/${folderName}`,\r",
							"                        method: 'GET',\r",
							"                        header: {\r",
							"                            \"Authorization\": \"Bearer \" + msAccessToken,\r",
							"                            'Content-Type': 'application/json'\r",
							"                        }\r",
							"                    };\r",
							"\r",
							"                    setTimeout(() => {\r",
							"                        pm.sendRequest(requestFindFolder, function (err, findFolderResponse) {\r",
							"                            if (err) {\r",
							"                                console.error('Error:', err);\r",
							"                                return;\r",
							"                            }\r",
							"\r",
							"                            if (findFolderResponse.code === 204) {\r",
							"                                console.log('204 No Folder Received');\r",
							"                            } else if (findFolderResponse.code === 401) {\r",
							"                                console.log(\"Invalid response: \" + findFolderResponse.json().message);\r",
							"                            } else if (findFolderResponse.code === 200 || findFolderResponse.code === 404) {\r",
							"                                var parsedFolder = findFolderResponse.json();\r",
							"                                var folderID = parsedFolder.id;\r",
							"\r",
							"                                if (folderID === null) {\r",
							"                                    createFolder(folderName);\r",
							"                                } else {\r",
							"                                    handleFileDeletion(previousTruckVIN, folderName);\r",
							"                                }\r",
							"                            }\r",
							"                        });\r",
							"                    }, delayBetweenRequests);\r",
							"                }\r",
							"            }\r",
							"        });\r",
							"\r",
							"        console.log(\"EOF reached\");\r",
							"    }\r",
							"\r",
							"    // Start sending requests\r",
							"    sendRequestWithDelay(0);\r",
							"}\r",
							"\r",
							"// Function to convert JSON to CSV\r",
							"function jsonToCsv(jsonData) {\r",
							"    var csv = Object.keys(jsonData).map(key => `${key},${jsonData[key]}`).join('\\n');\r",
							"    return csv;\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"searchID\": \"customsearch1188\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7936739.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=1001&deploy=1",
					"protocol": "https",
					"host": [
						"7936739",
						"restlets",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"app",
						"site",
						"hosting",
						"restlet.nl"
					],
					"query": [
						{
							"key": "script",
							"value": "1001"
						},
						{
							"key": "deploy",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}